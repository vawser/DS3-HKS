local PC, Speed, LStick = nil

function ExecEvent(state)
    hkbFireEvent(state)
    return
end

function ExecEvents(...)
    local buff = {...}
    for f2_local1 = 1, #buff, 1 do
        ExecEvent(buff[f2_local1])
    end

end

function SetWeightIndex()
    if env(GetSpEffectID, 4000) == TRUE then
        SetVariable("MoveWeightIndex", 4)
        return
    else
        SetVariable("MoveWeightIndex", 0)
        return
    end
end

function GetEquipType(hand, ...)
    local buff = {...}
    local kind = {}
    local num = 1
    if hand == HAND_BOTH then
        kind[1] = env(GetEquipWeaponCategory, HAND_LEFT)
        kind[2] = env(GetEquipWeaponCategory, HAND_RIGHT)
        num = 2
    else
        kind[1] = env(GetEquipWeaponCategory, hand)
    end
    for f4_local3 = 1, num, 1 do
        for f4_local6 = 1, #buff, 1 do
            if kind[f4_local3] == buff[f4_local6] then
                return TRUE
            end
        end
    end
    return FALSE

end

function SetVariable(name, value)
    act(SetHavokVariable, name, value)
end

function SetActiveState(state)
    local num = g_FrameCount % 2 * 2
    if g_StateCondition[num] == nil then
        num = num + 1
    end
    g_StateCondition[num] = state
    return
end

function IsActiveState(state)
end

function ExecGuard(state1, state2)
    local kind = env(GetEquipWeaponCategory, HAND_LEFT)
    local style = env(GetWeaponSwitchState)
    local is_shield = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_SHIELD, WEAPON_CATEGORY_LARGE_SHIELD, WEAPON_CATEGORY_TOCHE)
    if style == HAND_RIGHT and is_shield == FALSE or env(IsPrecisionShoot) == TRUE then
        return FALSE
    end
    if style == HAND_LEFT_BOTH then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW) == TRUE then
            return FALSE
        end
    elseif style == HAND_RIGHT_BOTH and GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW) == TRUE then
        return FALSE
    end
    if kind == WEAPON_CATEGORY_TOCHE then
        if style == HAND_RIGHT then
            SetVariable("IndexGuardStyle", GUARD_STYLE_TOCHE)
        else
            SetVariable("IndexGuardStyle", GUARD_STYLE_DEFAULT)
        end
    else
        SetVariable("IndexGuardStyle", GUARD_STYLE_DEFAULT)
    end
    if state1 ~= nil then
        ExecEvent(state1)
    end
    if state2 ~= nil then
        ExecEvent(state2)
    end
    return TRUE
end

function ResetRequest()
    act(ResetInputQueue)
end

function CheckActionRequest()
    if g_TimeCheckActionRequest ~= g_FrameCount then
        g_IsActionRequest = env(HasActionRequest)
        g_TimeCheckActionRequest = g_FrameCount
    end
end

function MoveUpdate()
    local stick_level = g_MoveSpeedLevel
    local is_aim = env(IsPrecisionShoot)
    if env(ActionDuration, ACTION_ARM_SP_MOVE) > 100 and g_MagicCondition <= 0 then
        if (g_IsLockon == false or g_IsLockon == true and math.abs(g_MoveAngle) < 25) and is_aim == FALSE then
            if stick_level > 0 then
                stick_level = 2
            end
        else
            stick_level = 1
        end
    end
    if g_IsLockon == true or is_aim == TRUE then
        if stick_level > 0 then
            SetVariable("MoveAngleReal", g_MoveAngle)
        end
    else
        SetVariable("MoveAngleReal", 0)
    end
    if Speed.IsDashPenalty == TRUE then
        if stick_level < 1.5 then
            Speed.DashPenaltyCount = Speed.DashPenaltyCount + 1
        end
        if Speed.DashPenaltyCount > 5 then
            Speed.IsDashPenalty = FALSE
            Speed.DashPenaltyCount = 0
            Speed.SpeedLevel = SPEED_STATE_START_DASH
        end
        if env(GetStamina) <= 100 then
            if stick_level > 1 then
                stick_level = 1
            end
        else
            Speed.IsDashPenalty = FALSE
        end
    end
    local speed = Speed:GetMoveSpeed(stick_level)
    SetEnableMoveTAE(speed)
    SetVariable("MoveSpeedLevelReal", speed)
    g_MoveSpeedLevelReal = speed
    if speed > 1.5 and Speed.StopCount == 0 then
        if g_FrameCount % 2 == 0 then
            act(ChangeStamina, -1)
        end
        if env(GetStamina) <= 0 then
            Speed.IsDashPenalty = TRUE
        end
    end
    if Speed.MoveCount > 1 then
        if speed >= 0.15000000596046448 and speed <= 1 then
            if Speed.StopCount > 1 then
                g_State = PLAYER_STATE_IDLE
                Speed.StopCount = 0
                SetVariable("LocomotionState", PLAYER_STATE_IDLE)
                SetVariable("MoveSpeedLevelReal", 0)
                g_TimeMoveStop = g_FrameCount
                g_MoveSpeedLevelReal = 0
                if g_MagicCondition > 0 then
                    ExecEvents("W_Lower", "W_Magic_Continue")
                elseif speed <= 0.3499999940395355 then
                    ExecEvent("WalkStop")
                else
                    ExecEvent("RunStop")
                end
                return
            end
        elseif speed > 1.5 and Speed.StopCount > 3 then
            g_State = PLAYER_STATE_IDLE
            SetVariable("LocomotionState", PLAYER_STATE_IDLE)
            SetVariable("MoveSpeedLevelReal", 0)
            g_MoveSpeedLevelReal = 0
            Speed:SetSpeedZero()
            g_TimeMoveStop = g_FrameCount
            if g_MagicCondition > 0 then
                ExecEvents("W_Lower", "W_Magic_Continue")
            else
                ExecEvent("DashStop")
                if g_IsGuard == TRUE then
                    ExecGuard("W_GuardOn_Upper", nil)
                end
            end
            return
        end
    end
    if speed <= 0 then
        g_State = PLAYER_STATE_IDLE
        g_TimeMoveStop = g_FrameCount
        g_MoveSpeedLevelReal = 0
        SetVariable("LocomotionState", PLAYER_STATE_IDLE)
        if g_MagicCondition > 0 then
            ExecEvents("W_Lower", "W_Magic_Continue")
        elseif g_IsGuard == TRUE then
            ExecGuard("W_GuardOn", nil)
            return
        else
            ExecEvent("Idle_wild")
            return
        end
    end
    if g_IsLockon == true then
        if g_MoveAngle < 90 and g_MoveAngle > -90 then
            ExecEvent("MoveLockonToDefault")
        elseif g_MoveAngle > 90 or g_MoveAngle < -90 then
            ExecEvent("MoveLockonToMirror")
        end
    end
end

function MoveStart(state)
    if env(MovementRequest) == TRUE and 0 < g_MoveSpeedLevel then
        Speed.MoveCount = 0
        g_State = PLAYER_STATE_MOVE
        SetVariable("LocomotionState", PLAYER_STATE_MOVE)
        SetEnableMoveTAE(0)
        if g_IsGuard == FALSE then
            if g_IsUseHoldTransition == FALSE or g_IsLockon == false then
                ExecEvent("W_Move")
            else
                ExecEvent("W_Move")
            end
            if state ~= nil then
                ExecEvent(state)
            end
            return TRUE
        else
            g_GuardUpperCondition = 2
            if g_IsUseHoldTransition == FALSE then
                ExecEvent("W_Move")
            else
                ExecEvent("W_Move")
            end
            ExecEvent(state)
        end
        g_IsUseHoldTransition = FALSE
        g_TimeMoveStop = -1
        return TRUE
    end
    return FALSE
end

function GetKickRequest()
    local level, angle = nil
    local f13_local2, f13_local3 = LStick:GetLStick(0)
    angle = f13_local3
    level = f13_local2
    if level > 0.30000001192092896 then
        f13_local2, f13_local3 = LStick:GetLStick(3)
        angle = f13_local3
        level = f13_local2
        if level <= 0 then
            f13_local2, f13_local3 = LStick:GetLStick(4)
            angle = f13_local3
            level = f13_local2
            if level <= 0 then
                return TRUE
            end
        end
    end
    return FALSE
end

function SetEnableMoveTAE(speed)
    if speed < 0.75 then
        if g_MoveCondition ~= MOVE_WALK then
            g_MoveCondition = MOVE_WALK
            SetVariable("IsEnableWalkTAE", true)
            SetVariable("IsEnableRunTAE", false)
            SetVariable("IsEnableDashTAE", false)
        end
    elseif speed < 1.5 then
        if g_MoveCondition ~= MOVE_RUN then
            g_MoveCondition = MOVE_RUN
            SetVariable("IsEnableWalkTAE", false)
            SetVariable("IsEnableRunTAE", true)
            SetVariable("IsEnableDashTAE", false)
        end
    elseif g_MoveCondition ~= MOVE_DASH then
        g_MoveCondition = MOVE_DASH
        SetVariable("IsEnableWalkTAE", false)
        SetVariable("IsEnableRunTAE", false)
        SetVariable("IsEnableDashTAE", true)
    end
end

function GetAttackRequest()
    local is_kick = GetKickRequest()
    local style = env(GetWeaponSwitchState)
    local is_both = FALSE
    local is_arrow = FALSE
    local is_spear = FALSE
    local is_stagg = FALSE
    local right_kind = env(GetEquipWeaponCategory, HAND_RIGHT)
    local left_kind = env(GetEquipWeaponCategory, HAND_LEFT)
    if style >= HAND_LEFT_BOTH then
        is_both = TRUE
    end
    if env(ActionRequest, ACTION_ARM_R1) == TRUE then
        if is_kick == TRUE then
            return ATTACK_REQUEST_LIGHT_KICK
        elseif is_both == TRUE then
            if style == HAND_LEFT_BOTH then
                is_arrow = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
            else
                is_arrow = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
            end
            if is_arrow == TRUE then
                return ATTACK_REQUEST_ARROW_FIRE
            else
                return ATTACK_REQUEST_BOTH_LIGHT
            end
        elseif g_IsGuard == TRUE then
            is_spear = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SPEAR)
            if is_spear == TRUE and hkbGetVariable("IndexGuardStyle") ~= GUARD_STYLE_TOCHE then
                return ATTACK_REQUEST_ATTACK_WHILE_GUARD
            else
                return ATTACK_REQUEST_RIGHT_LIGHT
            end
        else
            is_staff = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_STAFF)
            if is_staff == TRUE then
                return ATTACK_REQUEST_INVALID
            end
            is_arrow = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
            if is_arrow == TRUE then
                return ATTACK_REQUEST_ARROW_CHANGE2
            end
            return ATTACK_REQUEST_RIGHT_LIGHT
        end
    end
    if env(ActionDuration, ACTION_ARM_R1) > 100 and g_MoveSpeedLevel <= 0 and is_both == TRUE then
        if style == HAND_LEFT_BOTH then
            is_arrow = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
        else
            is_arrow = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
        end
        if is_arrow == TRUE then
            return ATTACK_REQUEST_ARROW_FIRE
        end
    end
    if env(ActionRequest, ACTION_ARM_R2) == TRUE then
        if is_kick == TRUE then
            return ATTACK_REQUEST_HEAVY_KICK
        else
            if style == HAND_RIGHT or style == HAND_RIGHT_BOTH then
                is_arrow = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
            elseif style == HAND_LEFT_BOTH then
                is_arrow = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
            end
            if is_arrow == TRUE then
                return ATTACK_REQUEST_ARROW_CHANGE_RIGHT
            elseif is_both == TRUE then
                return ATTACK_REQUEST_BOTH_HEAVY
            else
                return ATTACK_REQUEST_RIGHT_HEAVY
            end
        end
    end
    local is_shield = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_SHIELD, WEAPON_CATEGORY_LARGE_SHIELD)
    if env(ActionRequest, ACTION_ARM_L1) == TRUE then
        if env(IsPrecisionShoot) == TRUE then
            return ATTACK_REQUEST_INVALID
        end
        if is_shield == TRUE then
            return ATTACK_REQUEST_INVALID
        end
        is_arrow = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
        if is_arrow == TRUE then
            if is_both == FALSE then
                return ATTACK_REQUEST_ARROW_CHANGE
            else
                return ATTACK_REQUEST_INVALID
            end
        end
        is_staff = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_STAFF)
        if is_staff == TRUE then
            return ATTACK_REQUEST_INVALID
        end
        is_arrow = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
        if is_arrow == TRUE and is_both == TRUE then
            return ATTACK_REQUEST_INVALID
        end
        return ATTACK_REQUEST_LEFT_LIGHT
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE then
        is_arrow = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW)
        if is_arrow == TRUE and false then
            return ATTACK_REQUEST_ARROW_CHANGE_LEFT
        elseif is_both == TRUE then
            if right_kind == WEAPON_CATEGORY_EXTRALARGE_SWORD then
                return ATTACK_REQUEST_STEPIN
            elseif right_kind == WEAPON_CATEGORY_CURVEDSWORD then
                return ATTACK_REQUEST_SPIN
            elseif right_kind == WEAPON_CATEGORY_HALBERD then
                return ATTACK_REQUEST_DRAWSTANCE
            elseif right_kind == WEAPON_CATEGORY_SHORT_SWORD then
                return ATTACK_REQUEST_QUICKITEM
            else
                return ATTACK_REQUEST_LEFT_PARRY
            end
        elseif left_kind == WEAPON_CATEGORY_TOCHE then
            return ATTACK_REQUEST_LEFT_BASH
        elseif is_shield == TRUE then
            return ATTACK_REQUEST_LEFT_PARRY
        else
            return ATTACK_REQUEST_LEFT_HEAVY
        end
    end
    return ATTACK_REQUEST_INVALID
end

function ExecAttack(r1, r2, l1, l2, b1, b2)
    if g_IsActionRequest == FALSE and env(ActionDuration, ACTION_ARM_R1) > 100 and g_MoveSpeedLevel > 0 then
        return FALSE
    end
    if env(GetStamina) <= 0 then
        return FALSE
    end
    local request = GetAttackRequest()
    if request == ATTACK_REQUEST_INVALID then
        return FALSE
    end
    ExecEvent(TRANS_TO_ALL_BODY)
    act(SetDamageMotionBlendRatio, 0)
    if request == ATTACK_REQUEST_RIGHT_LIGHT then
        ExecEvents(TRANS_TO_ALL_BODY, r1)
        return TRUE
    elseif request == ATTACK_REQUEST_LIGHT_KICK then
        ExecEvents(TRANS_TO_ALL_BODY, "W_AttackRightLightKick")
        return TRUE
    elseif request == ATTACK_REQUEST_RIGHT_HEAVY then
        ExecEvents(TRANS_TO_ALL_BODY, r2)
        return TRUE
    elseif request == ATTACK_REQUEST_HEAVY_KICK then
        ExecEvents(TRANS_TO_ALL_BODY, "W_AttackRightHeavyKick")
        return TRUE
    elseif request == ATTACK_REQUEST_LEFT_LIGHT then
        ExecEvents(TRANS_TO_ALL_BODY, l1)
        return TRUE
    elseif request == ATTACK_REQUEST_LEFT_HEAVY then
        ExecEvents(TRANS_TO_ALL_BODY, l2)
        return TRUE
    elseif request == ATTACK_REQUEST_BOTH_LIGHT then
        ExecEvents(TRANS_TO_ALL_BODY, b1)
        return TRUE
    elseif request == ATTACK_REQUEST_BOTH_HEAVY then
        ExecEvents(TRANS_TO_ALL_BODY, b2)
        return TRUE
    elseif request == ATTACK_REQUEST_ARROW_CHANGE2 then
        if ExecHandChange(HAND_RIGHT, TRUE) == TRUE then
            return TRUE
        end
    elseif request == ATTACK_REQUEST_ARROW_CHANGE then
        if ExecHandChange(HAND_LEFT, TRUE) == TRUE then
            return TRUE
        end
    elseif request == ATTACK_REQUEST_LEFT_BASH then
        ExecEvents(TRANS_TO_ALL_BODY, "W_AttackLeftBash")
        return TRUE
    elseif request == ATTACK_REQUEST_LEFT_PARRY then
        ExecEvents(TRANS_TO_ALL_BODY, "W_AttackLeftParry")
        return TRUE
    elseif request == ATTACK_REQUEST_STEPIN then
        ExecEvents(TRANS_TO_ALL_BODY, "W_StepInFront")
        return TRUE
    elseif request == ATTACK_REQUEST_SPIN then
        g_SpinAngle = g_MoveAngle
        SetVariable("SpinAngle", g_SpinAngle)
        ExecEvents(TRANS_TO_ALL_BODY, "W_Spin")
        act(ChangeStamina, -25)
        return TRUE
    elseif request == ATTACK_REQUEST_DRAWSTANCE and g_FrameCount - g_LastDrawStanceFrame > 10 then
        if g_MoveSpeedLevel == 0 then
            ExecEvents(TRANS_TO_ALL_BODY, "W_DrawStanceIdle")
            g_LastDrawStanceFrame = g_FrameCount
            return TRUE
        else
            ExecEvents(TRANS_TO_ALL_BODY, "W_DrawStanceMove_Sync")
            g_LastDrawStanceFrame = g_FrameCount
            return TRUE
        end
    elseif request == ATTACK_REQUEST_QUICKITEM then
        local item_type = env(GetItemAnimType)
        if item_type == ITEM_THROW_KNIFE then
            ExecEvents(TRANS_TO_ALL_BODY, "W_QuickItemThrowKnife")
            return TRUE
        else
            ExecEventAllBody("W_ItemInvalid")
            return TRUE
        end
    elseif request == ATTACK_REQUEST_ARROW_FIRE then
        ExecEvents(TRANS_TO_ALL_BODY, "W_AttackArrowStart")
        return TRUE
    elseif request == ATTACK_REQUEST_ATTACK_WHILE_GUARD then
        ExecEvents(TRANS_TO_ALL_BODY, "W_AttackRightWhileGuard")
        return TRUE
    elseif request == ATTACK_REQUEST_ARROW_CHANGE_RIGHT then
        SetVariable("IndexArrowChange", HAND_RIGHT)
        if g_State == PLAYER_STATE_MOVE then
            g_IsHalfBlend = TRUE
            ExecEvent("W_ArrowChange_Upper")
        else
            ExecEvents(TRANS_TO_ALL_BODY, "W_ArrowChange")
        end
        return TRUE
    elseif request == ATTACK_REQUEST_ARROW_CHANGE_LEFT then
        SetVariable("IndexArrowChange", HAND_LEFT)
        if g_State == PLAYER_STATE_MOVE then
            g_IsHalfBlend = TRUE
            ExecEvent("W_ArrowChange_Upper")
        else
            ExecEvents(TRANS_TO_ALL_BODY, "W_ArrowChange")
        end
        return TRUE
    end
    return FALSE
end

function SetIdleFlag()
    act(Wait)
end

function ExecMagic()
    if g_IsActionRequest == FALSE then
        return FALSE
    end
    local is_staff, hand = nil
    SetVariable("StateMagic", 1)
    if env(ActionRequest, ACTION_ARM_R1) == TRUE then
        if GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_STAFF) == FALSE then
            return FALSE
        end
        hand = HAND_RIGHT
    elseif env(ActionRequest, ACTION_ARM_L1) == TRUE then
        if GetEquipType(HAND_LEFT, WEAPON_CATEGORY_STAFF) == FALSE then
            return FALSE
        end
        hand = HAND_LEFT
    else
        return FALSE
    end
    local magic_type = env(GetMagicAnimType)
    local magic_index = MAGIC_REQUEST_NOTHING
    if magic_type == 0 then
        magic_index = MAGIC_REQUEST_ENBULLET
    elseif magic_type == 1 then
        magic_index = MAGIC_REQUEST_ENCHANT
    elseif magic_type == 2 then
    elseif magic_type == 3 then
    elseif magic_type == 4 then
    elseif magic_type == 5 then
        magic_index = MAGIC_REQUEST_FLAME_RADIATION
    elseif magic_type == 6 then
    elseif magic_type == 7 then
    elseif magic_type == 8 then
    elseif magic_type == 9 then
    elseif magic_type == 10 then
    elseif magic_type == 11 then
    elseif magic_type == 12 then
    elseif magic_type == 13 then
    elseif magic_type == 14 then
    elseif magic_type == 15 then
    elseif magic_type == 16 then
    elseif magic_type == 17 then
    elseif magic_type == 18 then
    elseif magic_type == 19 then
    elseif magic_type == 20 then
    elseif magic_type == 21 then
    elseif magic_type == 22 then
    elseif magic_type == 23 then
    elseif magic_type == 24 then
    elseif magic_type == 254 then
        SetVariable("StateMagic", 3)
    elseif magic_type == 255 then
        SetVariable("StateMagic", 3)
    else
        SetVariable("StateMagic", 3)
    end
    if magic_index == MAGIC_REQUEST_NOTHING then
        return FALSE
    end
    SetVariable("IndexMagicHand", hand)
    SetVariable("IndexMagicType", magic_index)
    ExecEvents("W_Lower", "W_Magic")
    return TRUE
end

function ExecGesture()
    if g_IsActionRequest == FALSE then
        return FALSE
    end
    if env(ActionRequest, ACTION_ARM_GESTURE) == FALSE then
        return FALSE
    end
    local request = env(GetGestureRequestNumber)
    if request == INVALID then
        return FALSE
    end
    SetVariable("IndexGesture", request)
    ExecEvent("W_Gesture")
    return TRUE
end

function ExecItem()
    if g_IsActionRequest == FALSE then
        return FALSE
    end
    if env(ActionRequest, ACTION_ARM_USE_ITEM) == TRUE then
        local item_type = env(GetItemAnimType)
        if item_type == ITEM_RECOVER then
            ExecEventAllBody("W_ItemRecover")
        elseif item_type == ITEM_WEAPON_ENCHANT then
            ExecEventAllBody("W_ItemWeaponEnchant")
        elseif item_type == ITEM_THROW_KNIFE then
            ExecEventAllBody("W_ItemThrowKnife")
        elseif item_type == ITEM_THROW_BOTTLE then
            ExecEventAllBody("W_ItemThrowBottle")
        elseif item_type == ITEM_MEGANE then
            ExecEventAllBody("W_ItemMeganeStart")
        elseif item_type == ITEM_REPAIR then
            ExecEventAllBody("W_ItemWeaponRepair")
        elseif item_type == ITEM_PRAY then
            ExecEventAllBody("W_ItemSoul")
        elseif item_type == ITEM_MESSAGE then
            ExecEventAllBody("W_ItemMessage")
        elseif item_type == ITEM_SOUL then
            ExecEventAllBody("W_ItemSoul")
        elseif item_type == ITEM_DRINK then
            ExecEventAllBody("W_ItemDrinkStart")
        elseif item_type == ITEM_SHOCK_WAVE then
            ExecEventAllBody("W_ItemShockWeaveStart")
        elseif item_type == ITEM_NO_DRINK then
            ExecEventAllBody("W_ItemDrinkNothing")
        elseif item_type == ITEM_INVALID then
            ExecEventAllBody("W_ItemInvalid")
        else
            return FALSE
        end
        ResetRequest()
        return TRUE
    end
end

function GetWeaponChangeType(hand)
    local kind = env(GetEquipWeaponCategory, hand)
    local left_offset = 0
    if hand == HAND_LEFT then
        left_offset = 4
    end
    if kind >= 20 and kind <= 24 or kind >= 27 and kind <= 31 or kind >= 33 and kind <= 34 or kind >= 41 and kind <= 43 or kind == 49 then
        return WEAPON_CHANGE_REQUEST_RIGHT_WAIST + left_offset
    elseif kind == 25 or kind == 26 or kind == 32 or kind == 35 or kind == 44 or kind == 45 or kind == 46 then
        return WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER + left_offset
    elseif kind >= 36 and kind <= 40 then
        return WEAPON_CHANGE_REQUEST_RIGHT_SPEAR + left_offset
    elseif kind >= 47 and kind <= 48 then
        return WEAPON_CHANGE_REQUEST_RIGHT_BACK + left_offset
    end
    return WEAPON_CHANGE_REQUEST_NOTHING
end

function ExecQuickChange()
    if g_IsActionRequest == FALSE then
        return FALSE
    end
    local kind = nil
    if env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_R) == TRUE then
        kind = GetWeaponChangeType(HAND_RIGHT)
    elseif env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == TRUE then
        kind = GetWeaponChangeType(HAND_LEFT)
    else
        return FALSE
    end
    if kind == WEAPON_CHANGE_REQUEST_NOTHING then
        return FALSE
    end
    ForwardLeg()
    SetVariable("WeaponChangeType", kind)
    ExecEventAllBody("W_WeaponQuickChange")
    return TRUE
end

function ExecWeaponChange()
    if g_IsActionRequest == FALSE then
        return FALSE
    end
    local kind = nil
    if env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_R) == TRUE then
        kind = GetWeaponChangeType(HAND_RIGHT)
    elseif env(ActionRequest, ACTION_ARM_CHANGE_WEAPON_L) == TRUE then
        kind = GetWeaponChangeType(HAND_LEFT)
    else
        return FALSE
    end
    if kind == WEAPON_CHANGE_REQUEST_NOTHING then
        return FALSE
    end
    SetVariable("WeaponChangeType", kind)
    if g_State == PLAYER_STATE_MOVE then
        g_IsHalfBlend = TRUE
        ExecEvent("W_WeaponChange_Upper")
    else
        ExecEvent("W_Lower")
        ExecEvent("W_WeaponChange")
    end
    g_IsGuard = FALSE
    return TRUE
end

function SetHandChangeStyle(s, e)
    SetVariable("HandChangeStartIndex", s)
    SetVariable("HandChangeEndIndex", e)
end

function ExecHandQuickChange(hand, is_force)
    if is_force == FALSE then
        if g_IsActionRequest == FALSE then
            return FALSE
        end
        if env(ActionRequest, ACTION_ARM_CHANGE_STYLE) == FALSE then
            return FALSE
        end
    end
    local style = env(GetWeaponSwitchState)
    if style == HAND_RIGHT then
        SetHandChangeStyle(0, 1)
    elseif style == HAND_RIGHT_BOTH then
        SetHandChangeStyle(1, 0)
    end
    ForwardLeg()
    ExecEventAllBody("W_HandQuickChange")
    return TRUE
end

function GetHandChangeType(hand)
    local kind = env(GetEquipWeaponCategory, hand)
    if kind >= 20 and kind <= 24 or kind >= 27 and kind <= 31 or kind >= 32 and kind <= 34 or kind >= 41 and kind <= 43 or kind == 49 then
        if hand == HAND_RIGHT then
            return WEAPON_CHANGE_REQUEST_RIGHT_WAIST
        elseif hand == HAND_LEFT then
            return WEAPON_CHANGE_REQUEST_LEFT_WAIST
        end
    elseif kind == 25 or kind == 26 or kind == 32 or kind == 35 or kind == 44 or kind == 45 or kind == 46 or kind >= 47 and kind <= 49 then
        if hand == HAND_RIGHT then
            return WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER
        elseif hand == HAND_LEFT then
            return WEAPON_CHANGE_REQUEST_LEFT_SHOULDER
        end
    elseif kind >= 36 and kind <= 40 then
        if hand == HAND_RIGHT then
            return WEAPON_CHANGE_REQUEST_RIGHT_SPEAR
        elseif hand == HAND_LEFT then
            return WEAPON_CHANGE_REQUEST_LEFT_SPEAR
        end
    elseif kind >= 47 and kind <= 49 then
        if hand == HAND_RIGHT then
            return WEAPON_CHANGE_REQUEST_RIGHT_WAIST
        elseif hand == HAND_LEFT then
            return WEAPON_CHANGE_REQUEST_LEFT_WAIST
        end
    end
    return WEAPON_CHANGE_REQUEST_NOTHING
end

function ExecHandChange(hand, is_force)
    if is_force == FALSE then
        if g_IsActionRequest == FALSE then
            return FALSE
        end
        if env(ActionRequest, ACTION_ARM_CHANGE_STYLE) == FALSE then
            return FALSE
        end
    end
    local style = env(GetWeaponSwitchState)
    local kind = nil
    if style == HAND_RIGHT then
        if hand == HAND_RIGHT then
            kind = GetHandChangeType(HAND_LEFT)
            if kind == WEAPON_CHANGE_REQUEST_LEFT_WAIST then
                SetHandChangeStyle(0, 4)
            elseif kind == WEAPON_CHANGE_REQUEST_LEFT_BACK then
                SetHandChangeStyle(1, 4)
            elseif kind == WEAPON_CHANGE_REQUEST_LEFT_SHOULDER then
                SetHandChangeStyle(2, 4)
            end
            act(SwitchEquippedWeapon, 1)
        else
            kind = GetHandChangeType(HAND_RIGHT)
            if kind == WEAPON_CHANGE_REQUEST_RIGHT_WAIST then
                SetHandChangeStyle(6, 9)
            elseif kind == WEAPON_CHANGE_REQUEST_RIGHT_BACK then
                SetHandChangeStyle(7, 9)
            elseif kind == WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER then
                SetHandChangeStyle(8, 9)
            else
                SetHandChangeStyle(7, 9)
            end
            act(SwitchEquippedWeapon, 2)
        end
    elseif style == HAND_RIGHT_BOTH then
        kind = GetHandChangeType(HAND_LEFT)
        if kind == WEAPON_CHANGE_REQUEST_LEFT_WAIST then
            SetHandChangeStyle(3, 0)
        elseif kind == WEAPON_CHANGE_REQUEST_LEFT_BACK then
            SetHandChangeStyle(4, 1)
        elseif kind == WEAPON_CHANGE_REQUEST_LEFT_SHOULDER then
            SetHandChangeStyle(5, 2)
        else
            SetHandChangeStyle(3, 0)
        end
        act(SwitchEquippedWeapon, 3)
    elseif style == HAND_LEFT_BOTH then
        kind = GetHandChangeType(HAND_RIGHT)
        if kind == WEAPON_CHANGE_REQUEST_RIGHT_WAIST then
            SetHandChangeStyle(9, 5)
        elseif kind == WEAPON_CHANGE_REQUEST_RIGHT_BACK then
            SetHandChangeStyle(10, 6)
        elseif kind == WEAPON_CHANGE_REQUEST_RIGHT_SHOULDER then
            SetHandChangeStyle(11, 7)
        else
            SetHandChangeStyle(10, 8)
        end
        act(SwitchEquippedWeapon, 1)
    end
    if g_State == PLAYER_STATE_MOVE then
        g_IsHalfBlend = TRUE
        ExecEvent("W_HandChange_Upper")
    else
        ExecEvent("W_Lower")
        ExecEvent("W_HandChange")
    end
    g_IsGuard = FALSE
    ResetRequest()
    return TRUE
end

function GetEvasionReqest()
    if env(GetStamina) >= STAMINA_MINIMUM then
        if env(ActionRequest, ACTION_ARM_SP_MOVE) == TRUE then
            local speed = g_MoveSpeedLevelReal
            if speed > SPEED_ENABLE_JUMP then
                return ATTACK_REQUEST_JUMP
            end
        end
        if env(ActionRequest, ACTION_ARM_ROLLING) == TRUE then
            return ATTACK_REQUEST_ROLLING
        elseif env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE then
            return ATTACK_REQUEST_BACKSTEP
        end
    end
    return ATTACK_REQUEST_NOTHING
end

function ExecEvasion(flag)
    if g_IsActionRequest == FALSE then
        return FALSE
    end
    local request = nil
    request = GetEvasionReqest()
    if request == ATTACK_REQUEST_NOTHING then
        return FALSE
    end
    if request == ATTACK_REQUEST_ROLLING then
        act(ChangeStamina, STAMINA_REDUCE_ROLLING)
        Speed:SetSpeedZero()
        if g_MoveAngle >= 0 then
            SetVariable("RollingDirection", 1)
        else
            SetVariable("RollingDirection", 0)
        end
        if g_IsLockon == true then
            SetVariable("RollingAngle", g_MoveAngle)
        else
            SetVariable("RollingAngle", 0)
        end
        ExecEvents(TRANS_TO_ALL_BODY, "W_Rolling")
    elseif request == ATTACK_REQUEST_JUMP then
        act(ChangeStamina, STAMINA_REDUCE_ROLLING)
        Speed:SetSpeedZero()
        ExecEvents(TRANS_TO_ALL_BODY, "W_Jump")
    elseif request == ATTACK_REQUEST_BACKSTEP then
        act(ChangeStamina, STAMINA_REDUCE_ROLLING)
        ExecEvents(TRANS_TO_ALL_BODY, "W_BackStep")
        Speed:SetSpeedZero()
    end
    ResetRequest()
    return TRUE
end

function ExecQuickTurn()
    if g_IsLockon == false then
        return FALSE
    end
    local turn_angle = hkbGetVariable("TurnAngle")
    if math.abs(turn_angle) < 45 then
        return FALSE
    end
    if turn_angle >= -135 and turn_angle < -45 then
        act(SetTurnAnimCorrectionRate, 90)
        act(SetIsTurnAnimInProgress)
        ExecEvent("W_QuickTurnLeft90")
    elseif turn_angle >= 45 and turn_angle < 135 then
        act(SetTurnAnimCorrectionRate, 90)
        act(SetIsTurnAnimInProgress)
        ExecEvent("W_QuickTurnRight90")
    elseif turn_angle >= -180 and turn_angle < -135 then
        act(SetTurnAnimCorrectionRate, 180)
        act(SetIsTurnAnimInProgress)
        ExecEvent("W_QuickTurnLeft180")
    elseif turn_angle >= 135 and turn_angle <= 180 then
        act(SetTurnAnimCorrectionRate, 180)
        act(SetIsTurnAnimInProgress)
        ExecEvent("W_QuickTurnRight180")
    end
    return TRUE
end

function ExecFallStart(is_jump)
    if env(IsFalling) == TRUE then
        if is_jump == TRUE then
            if env(GetGeneralTAEFlag, 0) == TRUE then
                ExecEventAllBody("W_FallJumpStart")
                return TRUE
            end
        else
            ExecEventAllBody("W_FallStart")
            return TRUE
        end
    end
    return FALSE
end

function ExecThrowFallStart()
    if env(IsFalling) == TRUE then
        ExecEvent("ThrowFall")
        return TRUE
    end
end

function ExecEventAllBody(state)
    g_MoveSpeedLevelReal = 0
    Speed:SetSpeedZero()
    ExecEvents(TRANS_TO_ALL_BODY, state)
end

function ExecDamage()
    local is_weak = env(GetIsWeakPoint)
    local damage_angle = env(GetReceivedDamageDirection)
    local damage_level = env(GetDamageLevel)
    if g_HP <= 0 then
        if env(GetKnockbackDistance) < 0 then
            if damage_angle == 0 then
                damage_angle = 1
            elseif damage_angle == 1 then
                damage_angle = 0
            elseif damage_angle == 2 then
                damage_angle = 3
            elseif damage_angle == 3 then
                damage_angle = 2
            end
        end
        SetVariable("DamageDirection", damage_angle)
        if env(GetStateChangeType, CONDITION_TYPE_STONE) == TRUE then
            SetVariable("IndexDeath", DEATH_TYPE_STONE)
        elseif env(IsOnLadder) == TRUE then
            SetVariable("IndexDeath", DEATH_TYPE_LADDER)
        elseif is_weak == TRUE then
            SetVariable("IndexDeath", DEATH_TYPE_WEAK)
        elseif damage_level == DAMAGE_LEVEL_EXLARGE or damage_level == DAMAGE_LEVEL_SMALL_BLOW or damage_level == DAMAGE_LEVEL_BLAST then
            SetVariable("IndexDeath", DEATH_TYPE_BLAST)
        elseif damage_level == DAMAGE_LEVEL_FLING then
            SetVariable("IndexDeath", DEATH_TYPE_FLING)
        else
            SetVariable("DamageState", g_FrameCount % 4)
            if damage_angle == 3 then
                SetVariable("IndexDeath", DEATH_TYPE_COMMON_BACK)
            else
                SetVariable("IndexDeath", DEATH_TYPE_COMMON)
            end
        end
        ExecEventAllBody("W_DeathStart")
        return TRUE
    elseif env(IsInvincibleDebugMode) == FALSE and (env(GetStateChangeType, SP_TYPE_STONE) == TRUE or env(GetStateChangeType, SP_TYPE_CRYSTAL) == TRUE) then
        ExecEventAllBody("W_DeathTaint")
        return TRUE
    end
    local damage_type = env(GetReceivedDamageType)
    if damage_type == DAMAGE_TYPE_PARRY then
        ExecEventAllBody("W_DamageParry")
        return TRUE
    end
    local style = env(GetWeaponSwitchState)
    local kind = nil
    if damage_type >= GUARD_DAMAGE_GURDED and damage_type <= GUARD_DAMAGE_WALL_LEFT then
        local weapon_change_type = env(GetWeaponSwitchState)
        if damage_type == GUARD_DAMAGE_GURDED or damage_type == GUARD_DAMAGE_GURDED_LEFT then
            if weapon_change_type == HAND_RIGHT then
                SetVariable("GuardDamageIndex", 0)
            elseif weapon_change_type == HAND_LEFT or weapon_change_type == HAND_RIGHT_BOTH then
                SetVariable("GuardDamageIndex", 2)
            else
                SetVariable("GuardDamageIndex", 1)
            end
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
            ExecEventAllBody("W_GuardDamageBreak")
            return TRUE
        elseif damage_type == GUARD_DAMGE_GUARDBREAK then
            if style == HAND_RIGHT_BOTH then
                SetVariable("IndexGuardBreak", 0)
            else
                kind = env(GetEquipWeaponCategory, HAND_LEFT)
                if kind == WEAPON_CATEGORY_LARGE_SHIELD then
                    SetVariable("IndexGuardBreak", 1)
                else
                    SetVariable("IndexGuardBreak", 0)
                end
            end
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
            ExecEventAllBody("W_GuardBreak")
            return TRUE
        elseif damage_type == GUARD_DAMAGE_WALL_RIGHT then
            if style == HAND_RIGHT_BOTH then
                SetVariable("GuardDamageIndex", 2)
                act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
                ExecEventAllBody("W_GuardBreakWall")
                return TRUE
            else
                SetVariable("GuardDamageIndex", 1)
                act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
                ExecEventAllBody("W_GuardBreakWall")
                return TRUE
            end
        elseif damage_type == GUARD_DAMAGE_WALL_LEFT then
            SetVariable("GuardDamageIndex", 0)
            act(SetDamageAnimType, DAMAGE_FLAG_GUARD_BREAK)
            ExecEventAllBody("W_GuardBreakWall")
            return TRUE
        elseif damage_type == GUARD_DAMAGE_GUARDBREAK_BLAST then
            act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
            ExecEventAllBody("W_DamageSmallBlow")
            return TRUE
        elseif damage_type == GUARD_DAMAGE_GUARDBREAK_FLING then
            act(SetDamageAnimType, DAMAGE_FLAG_FLING)
            ExecEventAllBody("W_DamageFling")
            return TRUE
        end
    else
        local guard_damage_level = env(GetGuardLevelAction)
        if guard_damage_level > 0 then
            if env(GetSpEffectID, 1903) == TRUE then
                return FALSE
            elseif guard_damage_level == 1 then
                act(SetDamageAnimType, DAMAGE_FLAG_GUARD_SMALL)
                ExecEventAllBody("W_GuardDamageSmall")
            elseif guard_damage_level == 3 then
                act(SetDamageAnimType, DAMAGE_FLAG_GUARD_LARGE)
                ExecEventAllBody("W_GuardDamageMiddle")
            elseif guard_damage_level == 4 then
                act(SetDamageAnimType, DAMAGE_FLAG_GUARD_EXLARGE)
                ExecEventAllBody("W_GuardDamageLarge")
            else
                act(SetDamageAnimType, DAMAGE_FLAG_GUARD_LARGE)
                ExecEventAllBody("W_GuardDamageMiddle")
            end
            return TRUE
        end
    end
    if env(HasReceivedAnyDamage) == FALSE and damage_level == 0 then
        return FALSE
    end
    if env(GetKnockbackDistance) < 0 then
        if damage_angle == 0 then
            damage_angle = 1
        elseif damage_angle == 1 then
            damage_angle = 0
        elseif damage_angle == 2 then
            damage_angle = 3
        elseif damage_angle == 3 then
            damage_angle = 2
        end
    end
    SetVariable("DamageDirection", damage_angle)
    if is_weak == TRUE then
        act(SetDamageAnimType, DAMAGE_FLAG_WEAK)
        ExecEventAllBody("W_DamageWeak")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_SMALL then
        act(SetDamageAnimType, DAMAGE_FLAG_SMALL)
        ExecEventAllBody("W_DamageSmall")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_MIDDLE then
        act(SetDamageAnimType, DAMAGE_FLAG_MEDIUM)
        ExecEventAllBody("W_DamageMiddle")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_LARGE then
        act(SetDamageAnimType, DAMAGE_FLAG_LARGE)
        ExecEventAllBody("W_DamageLarge")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_EXLARGE then
        act(SetDamageAnimType, DAMAGE_FLAG_LARGE_BLOW)
        ExecEventAllBody("W_DamageExLarge")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_PUSH then
        act(SetDamageAnimType, DAMAGE_FLAG_PUSH)
        ExecEventAllBody("W_DamagePush")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_SMALL_BLOW then
        act(SetDamageAnimType, DAMAGE_FLAG_SMALL_BLOW)
        ExecEventAllBody("W_DamageSmallBlow")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_BLAST then
        act(SetDamageAnimType, DAMAGE_FLAG_LARGE_BLOW)
        ExecEventAllBody("W_DamageBlast")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_MINIMUM then
        act(SetDamageAnimType, DAMAGE_FLAG_MINIMUM)
        SetVariable("Random", g_FrameCount % 3)
        ExecEventAllBody("W_DamageMinimum")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_FLING then
        act(SetDamageAnimType, DAMAGE_FLAG_FLING)
        ExecEventAllBody("W_DamageFling")
        return TRUE
    elseif damage_level == DAMAGE_LEVEL_BREATH then
        act(SetDamageAnimType, DAMAGE_FLAG_BREATH)
        ExecEventAllBody("W_DamageBreath")
        return TRUE
    end
    return FALSE
end

function ExecFalling(is_enable_falling_death)
    local height = env(GetFallHeight) / 100
    local damage_type = env(GetReceivedDamageType)
    if damage_type == DAMAGE_TYPE_DEATH_FALLING then
        ExecEventAllBody("W_FallDeath")
        return TRUE
    end
    if is_enable_falling_death == TRUE and height >= 60 then
        ExecEventAllBody("W_FallDeath")
        return TRUE
    end
    if env(IsLanding) == TRUE then
        if g_FallStyle == FALL_DEFAULT then
            if height > 10 then
                if g_HP <= 0 then
                    SetVariable("IndexDeath", DEATH_TYPE_LAND)
                    ExecEventAllBody("W_DeathStart")
                    return TRUE
                else
                    SetVariable("LandIndex", LAND_HEAVY)
                end
            elseif height > 8 then
                if g_HP <= 0 then
                    SetVariable("IndexDeath", DEATH_TYPE_LAND)
                    ExecEventAllBody("W_DeathStart")
                    return TRUE
                else
                    SetVariable("LandIndex", LAND_MIDDLE)
                end
            elseif g_IsJumpFall == TRUE and height > 0 then
                if g_HP <= 0 then
                    SetVariable("IndexDeath", DEATH_TYPE_LAND_LOW)
                    ExecEventAllBody("W_DeathStart")
                    return TRUE
                else
                    SetVariable("LandIndex", LAND_JUMP)
                end
            elseif height > 3 then
                if g_HP <= 0 then
                    SetVariable("IndexDeath", DEATH_TYPE_LAND_LOW)
                    ExecEventAllBody("W_DeathStart")
                    return TRUE
                else
                    SetVariable("LandIndex", LAND_DEFAULT)
                end
            else
                if g_HP <= 0 then
                    SetVariable("IndexDeath", DEATH_TYPE_LAND_LOW)
                    ExecEventAllBody("W_DeathStart")
                    return TRUE
                else
                    ExecEventAllBody("Idle_wild")
                end
                return TRUE
            end
            g_IsJumpFall = FALSE
            ExecEventAllBody("W_Land")
            return TRUE
        else
            ExecEventAllBody("W_LandFallAttack")
            return TRUE
        end
    end
    if g_FallStyle == FALL_DEFAULT and env(ActionDuration, ACTION_ARM_R1) > 0 then
        local check_weapon = nil
        local condition = env(GetWeaponSwitchState)
        if condition == HAND_LEFT_BOTH then
            check_weapon = GetEquipType(HAND_LEFT, WEAPON_CATEGORY_STAFF, WEAPON_CATEGORY_FIST_CUT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_SMALL_SHIELD, WEAPON_CATEGORY_LARGE_SHIELD, WEAPON_CATEGORY_TOCHE)
        else
            check_weapon = GetEquipType(HAND_RIGHT, WEAPON_CATEGORY_STAFF, WEAPON_CATEGORY_FIST_CUT, WEAPON_CATEGORY_SMALL_ARROW, WEAPON_CATEGORY_LARGE_ARROW, WEAPON_CATEGORY_SMALL_SHIELD, WEAPON_CATEGORY_LARGE_SHIELD, WEAPON_CATEGORY_TOCHE)
        end
        if check_weapon == FALSE then
            g_FallStyle = FALL_ATTACK
            ExecEventAllBody("W_FallAttackStart")
            return TRUE
        else
            return
        end
    end
end

function ExecGuardOnCancelTiming()
    if env(IsGuardFromAtkCancel) == TRUE and (env(ActionRequest, ACTION_ARM_L1) == TRUE or env(ActionDuration, ACTION_ARM_L1) > 0) and ExecGuard("W_Lower", "W_GuardOn_Long") == TRUE then
        g_IsGuard = TRUE
        return TRUE
    end
    return FALSE
end

function LadderGetUpdateTiming()
    local f37_local0 = env(GetGeneralTAEFlag, 0)
    return f37_local0
end

function LadderUpDown()
    if g_LadderUpOrDown == LADDER_CALL_UP then
        act(SendMessageIDToEvents, LADDER_CALL_UP)
    elseif g_LadderUpOrDown == LADDER_CALL_DOWN then
        act(SendMessageIDToEvents, LADDER_CALL_DOWN)
    else
    end
end

function LadderUpdateIdle()
    if g_HP <= 0 then
        ExecEvent("W_LadderDeathStart")
        return TRUE
    end
    if g_IsLadderDamage == TRUE then
        if env(GetStamina) <= 80 then
            if g_LadderState == HAND_STATE_RIGHT then
                ExecEvent("W_LadderDamageLargeLeft")
            else
                ExecEvent("W_LadderDamageLargeRight")
            end
        elseif g_LadderState == HAND_STATE_RIGHT then
            ExecEvent("W_LadderDamageSmallLeft")
        else
            ExecEvent("W_LadderDamageSmallRight")
        end
        g_IsLadderDamage = FALSE
        return TRUE
    end
    if 0 >= env(ActionDuration, ACTION_ARM_SP_MOVE) then
        SetVariable("LadderSpeed", 1.100000023841858)
    elseif env(ActionDuration, ACTION_ARM_SP_MOVE) > 100 then
        SetVariable("LadderSpeed", 1.399999976158142)
    end
    if g_EventCommand == 2 then
        if env(IsSomeoneOnLadder, LADDER_CONFLICT_CHECK_DIST) == FALSE then
            if g_LadderState == HAND_STATE_LEFT then
                g_LadderState = HAND_STATE_RIGHT
                g_LadderExitCondition = LADDER_ACTION_UP_RIGHT
                ExecEvent("W_LadderUpRight")
            else
                g_LadderState = HAND_STATE_LEFT
                g_LadderExitCondition = LADDER_ACTION_UP_LEFT
                ExecEvent("W_LadderUpLeft")
            end
            return TRUE
        end
    elseif g_EventCommand == 3 then
        if env(IsSomeoneUnderLadder, LADDER_CONFLICT_CHECK_DIST) == FALSE then
            if g_LadderState == HAND_STATE_LEFT then
                g_LadderState = HAND_STATE_RIGHT
                g_LadderExitCondition = LADDER_ACTION_DOWN_RIGHT
                ExecEvent("W_LadderDownLeft")
            else
                g_LadderState = HAND_STATE_LEFT
                g_LadderExitCondition = LADDER_ACTION_DOWN_LEFT
                ExecEvent("W_LadderDownRight")
            end
            return TRUE
        end
    elseif g_EventCommand == 4 then
        if env(IsSomeoneOnLadder, LADDER_CONFLICT_CHECK_DIST) == FALSE then
            g_LadderExitCondition = LADDER_ACTION_END_TOP
            if g_LadderState == HAND_STATE_LEFT then
                g_LadderState = HAND_STATE_RIGHT
                ExecEvent("W_LadderEndTopLeft")
            else
                g_LadderState = HAND_STATE_LEFT
                ExecEvent("W_LadderEndTopRight")
            end
            return TRUE
        end
    elseif g_EventCommand == 5 and env(IsSomeoneUnderLadder, LADDER_CONFLICT_CHECK_DIST) == FALSE then
        g_LadderExitCondition = LADDER_ACTION_END_BOTTOM
        if g_LadderState == HAND_STATE_LEFT then
            LadderState = HAND_STATE_RIGHT
            ExecEvent("W_LadderEndBottomLeft")
        else
            g_LadderState = HAND_STATE_LEFT
            ExecEvent("W_LadderEndBottomRight")
        end
        return TRUE
    end
    return FALSE
end

function LadderUpdate()
    if g_HP <= 0 then
        ExecEvent("W_LadderDeathStart")
        return TRUE
    end
    if g_IsLadderDamage == FALSE and env(HasReceivedAnyDamage) == TRUE then
        g_IsLadderDamage = TRUE
    end
    if g_IsLadderUpdate == FALSE and LadderGetUpdateTiming() == TRUE then
        g_IsLadderUpdate = TRUE
        LadderSetEndState()
    end
    if env(IsMoveCancelPossible) == TRUE then
        if 0 < g_EventCommand then
            if LadderUpdateIdle() == TRUE then
            end
            g_IsLadderUpdate = FALSE
            return TRUE
        end
        if g_LadderState == LADDER_HAND_LEFT then
            ExecEvent("W_LadderIdleLeft")
        else
            ExecEvent("W_LadderIdleRight")
        end
        g_IsLadderUpdate = FALSE
        return TRUE
    end
end

function LadderCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    act(SetAllowedThrowAttackType, THROW_STATE_INVALID)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if g_HP <= 0 then
        ExecEvent("W_LadderDeathStart")
        return TRUE
    end
    if env(HasReceivedAnyDamage) == TRUE then
        if env(GetStamina) <= 80 then
            if g_LadderState == HAND_STATE_RIGHT then
                ExecEvent("W_LadderDamageLargeLeft")
            else
                ExecEvent("W_LadderDamageLargeRight")
            end
        elseif g_LadderState == HAND_STATE_RIGHT then
            ExecEvent("W_LadderDamageSmallLeft")
        else
            ExecEvent("W_LadderDamageSmallRight")
        end
        return TRUE
    end
end

function LadderStart()
    if g_EventCommand == LADDER_ACTION_START_BOTTOM then
        if env(IsSomeoneOnLadder, LADDER_CONFLICT_CHECK_DIST) == FALSE then
            g_IsLadder = TRUE
            g_LadderState = LADDER_HAND_LEFT
            g_LadderExitCondition = LADDER_ACTION_START_BOTTOM
            ExecEvent("W_LadderStartBottom")
            return TRUE
        end
    elseif g_EventCommand == LADDER_ACTION_START_TOP and env(IsSomeoneUnderLadder, LADDER_CONFLICT_CHECK_DIST) == FALSE then
        g_IsLadder = TRUE
        g_LadderState = LADDER_HAND_LEFT
        g_LadderExitCondition = LADDER_ACTION_START_TOP
        ExecEvent("W_LadderStartTop")
        return TRUE
    end
    return FALSE
end

function LadderSetEndState()
    if g_LadderExitCondition == LADDER_ACTION_START_BOTTOM then
        LadderSetExitState(LADDER_CALL_UP, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_START_TOP then
        LadderSetExitState(LADDER_CALL_DOWN, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_UP_RIGHT then
        LadderSetExitState(LADDER_CALL_UP, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_UP_LEFT then
        LadderSetExitState(LADDER_CALL_UP, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_DOWN_RIGHT then
        LadderSetExitState(LADDER_CALL_DOWN, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_DOWN_LEFT then
        LadderSetExitState(LADDER_CALL_DOWN, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_ATTACK_UP_RIGHT then
        LadderSetExitState(LADDER_CALL_DOWN, TRUE)
    elseif g_LadderExitCondition == LADDER_ACTION_ATTACK_UP_LEFT then
        LadderSetExitState(LADDER_CALL_DOWN, TRUE)
    elseif g_LadderExitCondition == LADDER_ACTION_ATTACK_DOWN_RIGHT then
        LadderSetExitState(LADDER_CALL_DOWN, TRUE)
    elseif g_LadderExitCondition == LADDER_ACTION_ATTACK_DOWN_LEFT then
        LadderSetExitState(LADDER_CALL_DOWN, TRUE)
    elseif g_LadderExitCondition == LADDER_ACTION_COAST_START_RIGHT then
        LadderSetExitState(LADDER_CALL_DOWN, TRUE)
    elseif g_LadderExitCondition == LADDER_ACTION_COAST_RIGHT then
        LadderSetExitState(LADDER_CALL_DOWN, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_COAST_LANDING then
        LadderSetExitState(LADDER_CALL_DOWN, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_END_TOP then
        LadderSetExitState(LADDER_CALL_UP, FALSE)
    elseif g_LadderExitCondition == LADDER_ACTION_END_BOTTOM then
        LadderSetExitState(LADDER_CALL_DOWN, FALSE)
    else
    end
end

function LadderSetEnterState(is_idle)
    act(SetLadderActionState, g_LadderExitCondition)
    act(SetHandStateOfLadder, g_LadderState)
    act(SetUnableToFall, TRUE)
    act(SetAllowedThrowDefenseType, LADDER_ACTION_INVALID)
    if is_idle == TRUE then
        act(SyncAtInit_Active, TRUE)
    else
        act(ClearSlopeInfo)
    end
    act(SetCanChangeEquipmentOn)
    return
end

function LadderSetExitState(event_call, is_idle)
    act(SetUnableToFall, FALSE)
    if is_idle == TRUE then
        act(SyncAtInit_Active, FALSE)
    else
        act(SendMessageIDToEvents, event_call)
    end
end

function LadderAttack()
    if env(ActionDuration, ACTION_ARM_R1) > 0 then
        g_LadderExitCondition = LADDER_ACTION_ATTACK_UP_RIGHT
        if g_LadderState == HAND_STATE_LEFT then
            LadderSetEnterState(TRUE)
            SetVariable("LadderAttackState", 0)
        else
            LadderSetEnterState(TRUE)
            SetVariable("LadderAttackState", 1)
        end
        ExecEvent("W_LadderAttack")
        return TRUE
    elseif env(ActionDuration, ACTION_ARM_R2) > 0 then
        g_LadderExitCondition = LADDER_ACTION_ATTACK_UP_RIGHT
        if g_LadderState == HAND_STATE_RIGHT then
            LadderSetEnterState(TRUE)
            SetVariable("LadderAttackState", 2)
        else
            LadderSetEnterState(TRUE)
            SetVariable("LadderAttackState", 3)
        end
        ExecEvent("W_LadderAttack")
        return TRUE
    end
    if env(ActionDuration, ACTION_ARM_SP_MOVE) > 250 and 0 >= g_MoveSpeedLevel and env(IsSomeoneUnderLadder, LADDER_CONFLICT_CHECK_DIST) == FALSE then
        if g_EventCommand == 5 then
            g_LadderExitCondition = LADDER_ACTION_END_BOTTOM
            if g_LadderState == HAND_STATE_LEFT then
                LadderState = HAND_STATE_RIGHT
                ExecEvent("W_LadderEndBottomLeft")
            else
                g_LadderState = HAND_STATE_LEFT
                ExecEvent("W_LadderEndBottomRight")
            end
            return TRUE
        else
            g_LadderExitCondition = LADDER_ACTION_COAST_START_RIGHT
            ExecEvent("LadderCoastStart")
            return TRUE
        end
    end
    return FALSE
end

function LadderCoast(hand)
    if env(GetGeneralTAEFlag, 0) == TRUE then
        if env(IsLadderEventEnd, 2) == TRUE then
            ExecEvent("LadderCoastLanding")
            return TRUE
        else
            LadderSetEndState()
            if env(IsSomeoneUnderLadder, LADDER_CONFLICT_CHECK_DIST) == TRUE or env(ActionDuration, ACTION_ARM_SP_MOVE) <= 0 or 0 < g_MoveSpeedLevel then
                ExecEvent("LadderCoastStop")
                return TRUE
            end
        end
        if hand == LADDER_HAND_LEFT then
            ExecEvent("LadderCoastRight")
            return TRUE
        else
            ExecEvent("LadderCoastLeft")
            return TRUE
        end
    end
    return FALSE
end

function IdleCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    SetIdleFlag()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    CheckActionRequest()
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if ExecQuickTurn() == TRUE then
        return
    end
    if (env(ActionRequest, ACTION_ARM_L1) == TRUE or env(ActionDuration, ACTION_ARM_L1) > 0) and ExecGuard("W_GuardStart", nil) == TRUE then
        g_IsGuard = TRUE
        return
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if ExecMagic() == TRUE then
        return
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    if 1 <= g_GuardUpperCondition and g_GuardUpperCondition <= 2 and ExecGuard("W_Lower", nil) == TRUE then
        g_GuardUpperCondition = 0
    end
    if g_TimeMoveStop ~= -1 and g_FrameCount - g_TimeMoveStop < 10 then
        g_IsUseHoldTransition = TRUE
    end
    if MoveStart(nil) == TRUE then
        g_IsUseHoldTransition = FALSE
        g_TimeMoveStop = -1
        return
    end
    g_TimeMoveStop = -1
    if ExecGesture() == TRUE then
        return
    end
    if LadderStart() == TRUE then
        return
    end
end

function SetAttackQueue(r1, r2, l1, l2, b1, b2)
    if r1 == nil then
        g_r1 = "W_AttackRightLight1"
    else
        g_r1 = r1
    end
    if r2 == nil then
        g_r2 = "W_AttackRightHeavy1Start"
    else
        g_r2 = r2
    end
    if l1 == nil then
        g_l1 = "W_AttackLeftLight1"
    else
        g_l1 = l1
    end
    if l2 == nil then
        g_l2 = "W_AttackLeftHeavy1"
    else
        g_l2 = l2
    end
    if b1 == nil then
        g_b1 = "W_AttackBothLight1"
    else
        g_b1 = b1
    end
    if b2 == nil then
        g_b2 = "W_AttackBothHeavy1"
    else
        g_b2 = b2
    end
end

function AttackCommonFunction(r1, r2, l1, l2, b1, b2)
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    if g_IsAttackStart == TRUE then
        SetAttackQueue(r1, r2, l1, l2, b1, b2)
        g_IsAttackStart = FALSE
    end
    CheckActionRequest()
    if hkbIsNodeActive("AttackLeftParry_Selector") then
        act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
        act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    else
        act(SetAllowedThrowAttackType, THROW_STATE_INVALID)
        act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    end
    if ExecDamage() == TRUE then
        g_IsCharging = 0
        return TRUE
    end
    if ExecFallStart(FALSE) == TRUE then
        g_IsCharging = 0
        return TRUE
    end
    if ExecGuardOnCancelTiming() == TRUE then
        g_IsCharging = 0
        return TRUE
    end
    if ExecHandQuickChange(HAND_RIGHT, FALSE) == TRUE then
        g_IsCharging = 0
        return TRUE
    end
    if ExecQuickChange() == TRUE then
        g_IsCharging = 0
        return TRUE
    end
    if ExecEvasion(TRUE) == TRUE then
        g_IsCharging = 0
        return TRUE
    end
    if ExecItem() == TRUE then
        g_IsCharging = 0
        return TRUE
    end
    if ExecAttack(r1, r2, l1, l2, b1, b2) == TRUE then
        ResetRequest()
        g_IsCharging = 0
        return TRUE
    end
    if MoveStart(nil) == TRUE then
        g_IsCharging = 0
        g_IsUseHoldTransition = FALSE
        g_TimeMoveStop = -1
        return TRUE
    end
    if ExecGesture() == TRUE then
        g_IsCharging = 0
        return TRUE
    end
    return FALSE
end

function ThrowCommonFunction()
    CheckActionRequest()
    if env(IsHitWall) == TRUE and env(GetGeneralTAEFlag, TAE_FLAG_THROWING) == TRUE then
        ExecEvent("W_ThrowCollision")
        return TRUE
    end
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return TRUE
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return TRUE
    end
    if ExecWeaponChange() == TRUE then
        return TRUE
    end
    if ExecEvasion() == TRUE then
        return TRUE
    end
    if ExecItem() == TRUE then
        return TRUE
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return TRUE
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return TRUE
    end
end

function ThrowCollisionCommonFunction()
    if env(GetGeneralTAEFlag, TAE_FLAG_ENABLE_POWER_RAGDOLL) == TRUE then
        SetVariable("EnablePowerRagdoll", true)
    end
    if env(GetGeneralTAEFlag, TAE_FLAG_POWER_RAGDOLL_BLEND_FRACTION) == TRUE then
        SetVariable("PowerRagdollBlendFraction", false)
    end
    if env(IsTruelyLanding) == TRUE then
        ExecEvent("W_ThrowLand")
        return TRUE
    end
end

function GestureCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecFallStart(FALSE) == TRUE then
        return TRUE
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return TRUE
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return TRUE
    end
    if ExecWeaponChange() == TRUE then
        return TRUE
    end
    if ExecEvasion(FALSE) == TRUE then
        return TRUE
    end
    if ExecItem() == TRUE then
        return TRUE
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return TRUE
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return TRUE
    end
end

function MagicCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecFallStart(FALSE) == TRUE then
        return TRUE
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return TRUE
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return TRUE
    end
    if ExecWeaponChange() == TRUE then
        return TRUE
    end
    if ExecEvasion(FALSE) == TRUE then
        return TRUE
    end
    if ExecItem() == TRUE then
        return TRUE
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return TRUE
    end
end

function ArrowCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecFallStart(FALSE) == TRUE then
        return TRUE
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return TRUE
    end
    if ExecWeaponChange() == TRUE then
        return TRUE
    end
    if ExecEvasion(FALSE) == TRUE then
        return TRUE
    end
    if ExecItem() == TRUE then
        return TRUE
    end
end

function EvasionCommonFunction(is_jump, r1, r2, l1, l2, b1, b2)
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(is_jump) == TRUE then
        return
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(TRUE) == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if ExecAttack(r1, r2, l1, l2, b1, b2) == TRUE then
        return
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return
    end
end

function DamageCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return
    end
end

function QuickTurnCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    act(SetIsTurnAnimInProgress)
    if ExecDamage() == TRUE then
        return
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    if env(IsMoveCancelPossible) == TRUE and MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return
    end
end

function LandCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_INVALID)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if ExecAttack("W_AttackRightLightStep", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return
    end
end

function ItemCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    act(SetIsItemInUse, TRUE)
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return TRUE
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return
    end
end

function StopCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    if g_IsHalfBlend == FALSE then
        SetIdleFlag()
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if env(GetGeneralTAEFlag, TAE_FLAG_GUARD_CANCEL) == FALSE then
        if 1 <= g_GuardUpperCondition and g_GuardUpperCondition <= 2 then
            if (env(ActionCancelRequest, ACTION_ARM_L1) == TRUE or env(ActionDuration, ACTION_ARM_L1) <= 0) and ExecGuard("W_Lower", "W_GuardEnd") == TRUE then
                g_IsGuard = FALSE
                ResetRequest()
                return
            end
        elseif g_IsGuard == FALSE and (env(ActionRequest, ACTION_ARM_L1) == TRUE or env(ActionDuration, ACTION_ARM_L1) > 0) and ExecGuard("W_Lower", "W_GuardStart") == TRUE then
            g_IsGuard = TRUE
            ResetRequest()
            return
        end
    elseif (env(ActionRequest, ACTION_ARM_L1) == TRUE or env(ActionDuration, ACTION_ARM_L1) > 0) and ExecGuard("W_GuardOn", nil) == TRUE then
        g_IsGuard = TRUE
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return TRUE
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion() == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if ExecQuickTurn() == TRUE then
        return
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    g_State = PLAYER_STATE_IDLE
    if g_TimeMoveStop ~= -1 and g_FrameCount - g_TimeMoveStop < 10 then
        g_IsUseHoldTransition = TRUE
    end
    if 1 <= g_GuardUpperCondition and g_GuardUpperCondition <= 2 then
        if MoveStart("W_GuardOn_Upper") == TRUE then
            g_IsUseHoldTransition = FALSE
            g_TimeMoveStop = -1
            return
        end
        g_TimeMoveStop = -1
    elseif g_IsMagic == FALSE then
        if MoveStart(nil) == TRUE then
            g_IsUseHoldTransition = FALSE
            g_TimeMoveStop = -1
            return
        end
        g_TimeMoveStop = -1
    end
    if LadderStart() == TRUE then
        return
    end
end

function MoveCommonFunction()
    if g_MagicCondition > 0 then
        MoveUpdate()
        return
    end
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    if g_IsHalfBlend == FALSE or g_IsGuard == TRUE then
        SetIdleFlag()
    end
    if hkbGetVariable("LocomotionState") ~= PLAYER_STATE_MOVE then
        SetVariable("LocomotionState", PLAYER_STATE_MOVE)
    end
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    act(SetMovementScaleMult, MOVE_RATE_DEFAULT)
    CheckActionRequest()
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if 1 <= g_GuardUpperCondition and g_GuardUpperCondition <= 2 then
        if (env(ActionCancelRequest, ACTION_ARM_L1) == TRUE or 0 >= env(ActionDuration, ACTION_ARM_L1)) and ExecGuard("W_GuardEnd_Upper", nil) == TRUE then
            g_IsGuard = FALSE
            ResetRequest()
            return
        end
    elseif (g_IsHalfBlend == FALSE or g_IsGuard == TRUE) and (env(ActionRequest, ACTION_ARM_L1) == TRUE or 0 < env(ActionDuration, ACTION_ARM_L1)) and ExecGuard("W_GuardStart_Upper", nil) == TRUE then
        g_IsGuard = TRUE
        ResetRequest()
        return
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if ExecMagic() == TRUE then
        return
    end
    if 1 < g_MoveSpeedLevelReal then
        if ExecAttack("W_AttackRightLightDash", "W_AttackRightHeavyKick", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothDash", "W_AttackBothHeavyKick") == TRUE then
            return
        end
    elseif ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    if LadderStart() == TRUE then
        return
    end
    if 7790 <= g_EventCommand and g_EventCommand <= 7794 then
        ExecEvent("W_PursuerMove")
    end
    MoveUpdate()
    g_IsHalfBlend = FALSE
end

function GuardCommonFunction(is_guard_end)
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    SetIdleFlag()
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if is_guard_end == FALSE or g_IsGuard == TRUE then
        if (env(ActionCancelRequest, ACTION_ARM_L1) == TRUE or env(ActionDuration, ACTION_ARM_L1) <= 0) and ExecGuard("W_Lower", "W_GuardEnd") == TRUE then
            g_IsGuard = FALSE
            return
        end
    elseif (env(ActionRequest, ACTION_ARM_L1) == TRUE or env(ActionDuration, ACTION_ARM_L1) > 0) and ExecGuard("W_Lower", "W_GuardStart") == TRUE then
        g_IsGuard = TRUE
        return
    end
    if g_State ~= PLAYER_STATE_MOVE then
        if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
            return
        end
        if ExecWeaponChange() == TRUE then
            return
        end
    end
    if ExecItem() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return
    end
    if ExecMagic() == TRUE then
        return
    end
    if ExecAttack("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    if g_State ~= PLAYER_STATE_MOVE then
        if 1 <= g_GuardUpperCondition and g_GuardUpperCondition <= 2 then
            if MoveStart("W_GuardOn_Upper") == TRUE then
                return
            end
        elseif is_guard_end == TRUE then
            if MoveStart(nil) == TRUE then
                return
            end
        elseif MoveStart("W_GuardOn_Upper") == TRUE then
            return
        end
    end
end

function WeaponChangeCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        g_IsHalfBlend = FALSE
        return
    end
    if env(GetGeneralTAEFlag, TAE_FLAG_DISENABLE_GUARD) == FALSE and env(ActionDuration, ACTION_ARM_L1) > 0 then
        g_IsGuard = TRUE
        if g_State == PLAYER_STATE_IDLE then
            if ExecGuard("W_Lower", "W_GuardStart") == TRUE then
                g_IsGuard = TRUE
                ResetRequest()
                g_IsHalfBlend = FALSE
                return
            end
        elseif ExecGuard("W_GuardStart_Upper", nil) == TRUE then
            ResetRequest()
            return
        end
    end
    if g_State == PLAYER_STATE_IDLE and 0 < g_MoveSpeedLevel then
        Speed.MoveCount = 0
        g_State = PLAYER_STATE_MOVE
        SetVariable("LocomotionState", PLAYER_STATE_MOVE)
        ExecEvent("W_Move")
        ExecEvent("W_WeaponChange_Upper_Continue")
        return
    end
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecFallStart(FALSE) == TRUE then
        return TRUE
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return TRUE
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return TRUE
    end
    if ExecEvasion(FALSE) == TRUE then
        return TRUE
    end
    if ExecItem() == TRUE then
        return TRUE
    end
    if ExecAttack(r1, r2, l1, l2, b1, b2) == TRUE then
        return TRUE
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return TRUE
    end
end

function ArrowChangeCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    if g_State ~= PLAYER_STATE_MOVE then
        CheckActionRequest()
        act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
        act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
        if ExecDamage() == TRUE then
            g_IsHalfBlend = FALSE
            return
        end
        if env(IsGuardFromAtkCancel) == TRUE and env(ActionDuration, ACTION_ARM_L1) > 0 then
            g_IsGuard = TRUE
            if g_State == PLAYER_STATE_IDLE then
                if ExecGuard("W_Lower", "W_GuardStart") == TRUE then
                    g_IsGuard = TRUE
                    ResetRequest()
                    g_IsHalfBlend = FALSE
                    return
                end
            elseif ExecGuard("W_GuardStart_Upper", nil) == TRUE then
                ResetRequest()
                return
            end
        end
        if g_State == PLAYER_STATE_IDLE and 0 < g_MoveSpeedLevel then
            Speed.MoveCount = 0
            g_State = PLAYER_STATE_MOVE
            SetVariable("LocomotionState", PLAYER_STATE_MOVE)
            ExecEvent("W_Move")
            ExecEvent("W_ArrowChange_Upper_Continue")
            return
        end
    end
    if g_State == PLAYER_STATE_MOVE and env(GetGeneralTAEFlag, 0) == TRUE then
        ExecEvent("W_Lower")
        g_IsHalfBlend = FALSE
    end
end

function HandChangeCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        g_IsHalfBlend = FALSE
        return
    end
    if env(GetGeneralTAEFlag, TAE_FLAG_DISENABLE_GUARD) == FALSE and env(ActionDuration, ACTION_ARM_L1) > 0 then
        if g_State == PLAYER_STATE_IDLE then
            if ExecGuard("W_Lower", "W_GuardStart") == TRUE then
                g_IsGuard = TRUE
                ResetRequest()
                g_IsHalfBlend = FALSE
                return
            end
        elseif ExecGuard("W_GuardStart_Upper") == TRUE then
            ResetRequest()
            return
        end
    end
    if ExecItem() == TRUE then
        return
    end
    if g_State == PLAYER_STATE_IDLE and 0 < g_MoveSpeedLevel then
        Speed.MoveCount = 0
        g_State = PLAYER_STATE_MOVE
        SetVariable("LocomotionState", PLAYER_STATE_MOVE)
        ExecEvent("W_Move")
        ExecEvent("W_HandChange_Upper_Continue")
        return
    end
end

function EventCommonFunction()
    if env(HasThrowRequest) == TRUE then
        return FALSE
    end
    CheckActionRequest()
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecGuardOnCancelTiming() == TRUE then
        return
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    local f67_local0 = ExecAttack
    local f67_local1 = "W_AttackRightLight1"
    local f67_local2 = "W_AttackRightHeavy1Start"
    local f67_local3, f67_local4 = nil
    if f67_local0(f67_local1, f67_local2, f67_local3, f67_local4, "W_AttackBothLight1", "W_AttackBothHeavy1") == TRUE then
        return
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return
    end
    if 7790 <= g_EventCommand and g_EventCommand <= 7794 then
        ExecEvent("W_PursuerIdle")
    end
end

function Idle_onActivate()
    ResetRequest()
    g_State = PLAYER_STATE_IDLE
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
    testframecount = g_FrameCount
end

function Idle_onUpdate()
    IdleCommonFunction()
end

function DashStop_onActivate()
    ResetRequest()
    g_State = PLAYER_STATE_IDLE
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
end

function DashStop_onUpdate()
    StopCommonFunction()
    g_GuardUpperCondition = 0
end

function RunStop_onActivate()
    ResetRequest()
    g_State = PLAYER_STATE_IDLE
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
end

function RunStop_onUpdate()
    StopCommonFunction()
    g_GuardUpperCondition = 0
end

function WalkStop_onActivate()
    ResetRequest()
    g_State = PLAYER_STATE_IDLE
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
end

function WalkStop_onUpdate()
    StopCommonFunction()
    g_GuardUpperCondition = 0
end

function Rolling_onActivate()
    ResetRequest()
    g_State = PLAYER_STATE_IDLE
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
end

function Rolling_onUpdate()
    act(SwitchMotion, FALSE)
    local f77_local0 = EvasionCommonFunction
    local f77_local1 = FALSE
    local f77_local2 = "W_AttackRightLightStep"
    local f77_local3 = "W_AttackRightHeavy2Start"
    local f77_local4, f77_local5 = nil
    f77_local0(f77_local1, f77_local2, f77_local3, f77_local4, f77_local5, "W_AttackBothStep", "W_AttackBothHeavy2")
end

function BackStep_onActivate()
    ResetRequest()
    g_State = PLAYER_STATE_IDLE
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
    act(SetMovementScaleMult, 1.2000000476837158)
end

function BackStep_onUpdate()
    act(SwitchMotion, FALSE)
    local f79_local0 = EvasionCommonFunction
    local f79_local1 = FALSE
    local f79_local2 = "W_AttackRightLightDash"
    local f79_local3 = "W_AttackRightHeavyKick"
    local f79_local4, f79_local5 = nil
    f79_local0(f79_local1, f79_local2, f79_local3, f79_local4, f79_local5, "W_AttackBothDash", "W_AttackBothHeavy2")
end

function Jump_onActivate()
    ResetRequest()
    g_State = PLAYER_STATE_IDLE
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
end

function Jump_onUpdate()
    act(SwitchMotion, FALSE)
    local f81_local0 = EvasionCommonFunction
    local f81_local1 = TRUE
    local f81_local2 = "W_AttackRightLightStep"
    local f81_local3 = "W_AttackRightHeavy2Start"
    local f81_local4, f81_local5 = nil
    f81_local0(f81_local1, f81_local2, f81_local3, f81_local4, f81_local5, "W_AttackBothStep", "W_AttackBothHeavy2")
end

local DebugMoveTime = -1

function Move_onActivate()
    ResetRequest()
    SetVariable("LocomotionState", PLAYER_STATE_MOVE)
    g_State = PLAYER_STATE_MOVE
end

function Move_onUpdate()
    g_TimeMoveUpdate = g_FrameCount
    MoveCommonFunction()
    g_GuardUpperCondition = 0
end

function Move_onDeactivate()
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
    SetVariable("LowerState", 0)
    g_State = PLAYER_STATE_IDLE
end

function GuardStart_onActivate()
    g_GuardCondition = 0
    ResetRequest()
end

function GuardStart_onUpdate()
    g_GuardCondition = 1
    GuardCommonFunction(FALSE)
end

function GuardOn_onActivate()
    ResetRequest()
end

function GuardOn_onUpdate()
    g_GuardCondition = 2
    GuardCommonFunction(FALSE)
end

function GuardEnd_onActivate()
    ResetRequest()
end

function GuardEnd_onUpdate()
    g_GuardCondition = 3
    GuardCommonFunction(TRUE)
end

function GuardStart_Upper_onActivate()
    g_GuardUpperCondition = 1
    ResetRequest()
end

function GuardStart_Upper_onUpdate()
    g_GuardUpperCondition = 1
end

function GuardOn_Upper_onActivate()
    ResetRequest()
end

function GuardOn_Upper_onUpdate()
    g_GuardUpperCondition = 2
end

function GuardEnd_Upper_onActivate()
    ResetRequest()
end

function GuardEnd_Upper_onUpdate()
    g_GuardUpperCondition = 3
end

function FallStart_onActivate()
    ResetRequest()
    g_FallStyle = FALL_DEFAULT
end

function FallStart_onUpdate()
    act(SwitchMotion, FALSE)
    ExecFalling(TRUE)
end

function FallJumpStart_onActivate()
    ResetRequest()
    g_FallStyle = FALL_DEFAULT
    g_IsJumpFall = TRUE
end

function FallJumpStart_onUpdate()
    act(SwitchMotion, FALSE)
    ExecFalling()
end

function FallLoop_onActivate()
    ResetRequest()
end

function FallLoop_onUpdate()
    act(SwitchMotion, FALSE)
    ExecFalling(TRUE)
end

function FallAttackStart_onActivate()
    ResetRequest()
end

function FallAttackStart_onUpdate()
    act(SwitchMotion, FALSE)
    ExecFalling()
end

function FallAttackLoop_onActivate()
    ResetRequest()
end

function FallAttackLoop_onUpdate()
    act(SwitchMotion, FALSE)
    ExecFalling(TRUE)
end

function FallAttackCancel_onActivate()
    ResetRequest()
end

function FallAttackCancel_onUpdate()
    act(SwitchMotion, FALSE)
    ExecFalling()
end

function FallDeath_onActivate()
    ResetRequest()
end

function FallDeath_onUpdate()
    act(SwitchMotion, FALSE)
    ExecFalling(FALSE)
end

function FallDeathLoop_onActivate()
    ResetRequest()
end

function FallDeathLoop_onUpdate()
    act(SwitchMotion, FALSE)
    ExecFalling(FALSE)
end

function Land_onActivate()
    ResetRequest()
    g_DisableFallAttack = FALSE
end

function Land_onUpdate()
    act(SwitchMotion, FALSE)
    LandCommonFunction()
end

function LandFallAttack_onActivate()
    ResetRequest()
end

function LandFallAttack_onUpdate()
    act(SwitchMotion, FALSE)
    LandCommonFunction()
end

function DamageSmall_onActivate()
    ResetRequest()
end

function DamageSmall_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetMovementScaleMult, 0)
    DamageCommonFunction()
end

function DamageMiddle_onActivate()
    ResetRequest()
end

function DamageMiddle_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetMovementScaleMult, 0)
    DamageCommonFunction()
end

function DamageLarge_onActivate()
    ResetRequest()
end

function DamageLarge_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetMovementScaleMult, 0)
    DamageCommonFunction()
end

function DamageWeak_onActivate()
    ResetRequest()
end

function DamageWeak_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function DamageMinimum_onActivate()
    ResetRequest()
end

function DamageMinimum_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function DamageFling_onActivate()
    ResetRequest()
end

function DamageFling_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function DamageExLarge_onActivate()
    ResetRequest()
end

function DamageExLarge_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function DamagePush_onActivate()
    ResetRequest()
end

function DamagePush_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetMovementScaleMult, 0)
    DamageCommonFunction()
end

function DamageSmallBlow_onActivate()
    ResetRequest()
end

function DamageSmallBlow_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function DamageBlast_onActivate()
    ResetRequest()
end

function DamageBlast_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function DamageBreath_onActivate()
    ResetRequest()
end

function DamageBreath_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function DamageParry_onActivate()
    ResetRequest()
end

function DamageParry_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function GuardDamageSmall_onActivate()
    ResetRequest()
end

function GuardDamageSmall_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function GuardDamageMiddle_onActivate()
    ResetRequest()
end

function GuardDamageMiddle_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function GuardDamageLarge_onActivate()
    ResetRequest()
end

function GuardDamageLarge_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function GuardBreak_onActivate()
    ResetRequest()
end

function GuardBreak_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function GuardDamageBreak_onActivate()
    ResetRequest()
end

function GuardDamageBreak_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function GuardBreakWall_onActivate()
    ResetRequest()
end

function GuardBreakWall_onUpdate()
    act(SwitchMotion, FALSE)
    DamageCommonFunction()
end

function DeathStart_onActivate()
    ResetRequest()
end

function DeathIdle_onActivate()
    ResetRequest()
    act(SyncAtInit_Passive, TRUE)
    act(SetDeathStay, TRUE)
end

function DeathIdle_onDeactivate()
    act(SyncAtInit_Passive, FALSE)
    act(SetDeathStay, FALSE)
end

function DeathTaintIdle_onActivate()
    ResetRequest()
    act(SyncAtInit_Passive, TRUE)
    act(SetDeathStay, TRUE)
end

function DeathTaintIdle_onDeactivate()
    act(SyncAtInit_Passive, FALSE)
    act(SetDeathStay, FALSE)
end

function DeathLand_onActivate()
    ResetRequest()
end

function DeathStone_onActivate()
    ResetRequest()
end

function DeathWeak_onActivate()
    ResetRequest()
end

function DeathSmallBlast_onActivate()
    ResetRequest()
end

function DeathFling_onActivate()
    ResetRequest()
end

function DeathBlast_onActivate()
    ResetRequest()
end

function DeathDrown_onActivate()
    ResetRequest()
end

function DeathFlame_onActivate()
    ResetRequest()
end

function DeathFlameBack_onActivate()
    ResetRequest()
end

function DeathCommon_onActivate()
    ResetRequest()
end

function DeathLadder_onActivate()
    ResetRequest()
end

function DeathLadder_onUpdate()
    g_IsLadder = FALSE
end

function DeathCommonBack_onActivate()
    ResetRequest()
end

function DeathTaint_onActivate()
    ResetRequest()
end

function QuickTurnLeft180_onUpdate()
    act(SwitchMotion, FALSE)
    QuickTurnCommonFunction()
end

function QuickTurnLeft90_onUpdate()
    act(SwitchMotion, FALSE)
    QuickTurnCommonFunction()
end

function QuickTurnRight180_onUpdate()
    act(SwitchMotion, FALSE)
    QuickTurnCommonFunction()
end

function QuickTurnRight90_onUpdate()
    act(SwitchMotion, FALSE)
    QuickTurnCommonFunction()
end

function AttackRight_onActivate()
    act(WhiffPossibility)
    act(SetAttackType, ATTACK_TYPE_DEFAULT)
    g_MoveSpeedLevelReal = 0
    Speed:SetSpeedZero()
end

function AttackRightLight1_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightLight1_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_AttackBothHeavy1")
end

function AttackRightLight1_onDeactivate()
    ExecEvent("LayerLeftArmOut")
end

function AttackRightLight2_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightLight2_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight3", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight3", "W_AttackBothHeavy1")
end

function AttackRightLight3_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightLight3_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight2", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight2", "W_AttackBothHeavy1")
end

function AttackRightLightKick_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightLightKick_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackRightLightStep_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightLightStep_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackRightLightDash_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightLightDash_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight3", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackRightHeavy1Start_onActivate()
    ResetRequest()
    g_IsCharging = 1
end

function AttackRightHeavy1Start_onUpdate()
    act(SwitchMotion, FALSE)
    g_IsCharging = 1
    if AttackCommonFunction() == TRUE then
        g_IsCharging = 0
        return
    end
    if 0 >= env(ActionDuration, ACTION_ARM_R2) then
        g_IsCharging = 0
    end
    if env(GetGeneralTAEFlag, TAE_FLAG_CHARGING) == 1 and g_IsCharging == 0 then
        ExecEvent("W_AttackRightHeavy1End")
        return
    end
end

function AttackRightHeavy1End_onActivate()
    g_IsAttackStart = TRUE
    ResetRequest()
end

function AttackRightHeavy1End_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2")
end

function AttackRightHeavy1Charge_onActivate()
    ResetRequest()
    g_IsCharging = 1
end

function AttackRightHeavy1Charge_onUpdate()
    act(SwitchMotion, FALSE)
    g_IsCharging = 1
    if AttackCommonFunction() == TRUE then
        g_IsCharging = 0
        return
    end
    if 0 >= env(ActionDuration, ACTION_ARM_R2) then
        g_IsCharging = 0
        ExecEvent("W_AttackRightHeavy1End")
        return
    end
end

function AttackRightHeavy1ChargeEnd_onActivate()
    g_IsAttackStart = TRUE
    ResetRequest()
    g_IsCharging = 0
end

function AttackRightHeavy1ChargeEnd_onUpdate()
    act(SetMovementScaleMult, 0.699999988079071)
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2")
end

function AttackRightHeavy1_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightHeavy1_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2")
end

function AttackRightHeavy1Sub_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightHeavy1Sub_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy2")
end

function AttackRightHeavy2Start_onActivate()
    ResetRequest()
    g_IsCharging = 1
end

function AttackRightHeavy2Start_onUpdate()
    act(SwitchMotion, FALSE)
    if AttackCommonFunction() == TRUE then
        return
    end
    if env(ActionDuration, ACTION_ARM_R2) <= 0 then
        g_IsCharging = 0
    end
    if env(GetGeneralTAEFlag, TAE_FLAG_CHARGING) == 1 and g_IsCharging == 0 then
        ExecEvent("W_AttackRightHeavy2End")
        return
    end
end

function AttackRightHeavy2End_onActivate()
    g_IsAttackStart = TRUE
    ResetRequest()
end

function AttackRightHeavy2End_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackRightHeavy2Charge_onActivate()
    ResetRequest()
    g_IsCharging = 1
end

function AttackRightHeavy2Charge_onUpdate()
    if AttackCommonFunction() == TRUE then
        return
    end
    act(SwitchMotion, FALSE)
    if env(ActionDuration, ACTION_ARM_R2) <= 0 then
        g_IsCharging = 0
        ExecEvent("W_AttackRightHeavy2End")
    end
end

function AttackRightHeavy2ChargeEnd_onActivate()
    g_IsAttackStart = TRUE
    ResetRequest()
    g_IsCharging = 0
end

function AttackRightHeavy2ChargeEnd_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackRightHeavy2_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightHeavy2_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackRightHeavyKick_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightHeavyKick_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLightStep", "W_AttackRightHeavy2Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackRightWhileGuard_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackRightWhileGuard_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction("W_AttackRightLight1", "W_AttackRightHeavy1Start", "W_AttackLeftLight1", "W_AttackLeftHeavy1", "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackLeft_onActivate()
    act(WhiffPossibility)
    act(SetAttackType, ATTACK_TYPE_DEFAULT)
    g_MoveSpeedLevelReal = 0
    Speed:SetSpeedZero()
end

function AttackLeftParry_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackLeftParry_onUpdate()
    act(SwitchMotion, FALSE)
    local f218_local0 = AttackCommonFunction
    local f218_local1 = "W_AttackRightLight2"
    local f218_local2 = "W_AttackRightHeavy1Start"
    local f218_local3, f218_local4, f218_local5, f218_local6 = nil
    f218_local0(f218_local1, f218_local2, f218_local3, f218_local4, f218_local5, f218_local6)
end

function AttackLeftBash_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackLeftBash_onUpdate()
    act(SwitchMotion, FALSE)
    local f220_local0 = AttackCommonFunction
    local f220_local1 = "W_AttackRightLight2"
    local f220_local2 = "W_AttackRightHeavy1Start"
    local f220_local3, f220_local4, f220_local5, f220_local6 = nil
    f220_local0(f220_local1, f220_local2, f220_local3, f220_local4, f220_local5, f220_local6)
end

function AttackLeftLight1_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackLeftLight1_onUpdate()
    act(SwitchMotion, FALSE)
    local f222_local0 = AttackCommonFunction
    local f222_local1 = "W_AttackRightLight1"
    local f222_local2 = "W_AttackRightHeavy1Start"
    local f222_local3 = "W_AttackLeftLight2"
    local f222_local4 = "W_AttackLeftHeavy1"
    local f222_local5, f222_local6 = nil
    f222_local0(f222_local1, f222_local2, f222_local3, f222_local4, f222_local5, f222_local6)
end

function AttackLeftLight2_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackLeftLight2_onUpdate()
    act(SwitchMotion, FALSE)
    local f224_local0 = AttackCommonFunction
    local f224_local1 = "W_AttackRightLight1"
    local f224_local2 = "W_AttackRightHeavy1Start"
    local f224_local3 = "W_AttackLeftLight3"
    local f224_local4 = "W_AttackLeftHeavy1"
    local f224_local5, f224_local6 = nil
    f224_local0(f224_local1, f224_local2, f224_local3, f224_local4, f224_local5, f224_local6)
end

function AttackLeftLight3_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackLeftLight3_onUpdate()
    act(SwitchMotion, FALSE)
    local f226_local0 = AttackCommonFunction
    local f226_local1 = "W_AttackRightLight1"
    local f226_local2 = "W_AttackRightHeavy1Start"
    local f226_local3 = "W_AttackLeftLight2"
    local f226_local4 = "W_AttackLeftHeavy1"
    local f226_local5, f226_local6 = nil
    f226_local0(f226_local1, f226_local2, f226_local3, f226_local4, f226_local5, f226_local6)
end

function AttackLeftHeavy1_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackLeftHeavy1_onUpdate()
    act(SwitchMotion, FALSE)
    local f228_local0 = AttackCommonFunction
    local f228_local1 = "W_AttackRightLight1"
    local f228_local2 = "W_AttackRightHeavy1Start"
    local f228_local3 = "W_AttackLeftLight1"
    local f228_local4 = "W_AttackLeftHeavy2"
    local f228_local5, f228_local6 = nil
    f228_local0(f228_local1, f228_local2, f228_local3, f228_local4, f228_local5, f228_local6)
end

function AttackLeftHeavy2_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackLeftHeavy2_onUpdate()
    act(SwitchMotion, FALSE)
    local f230_local0 = AttackCommonFunction
    local f230_local1 = "W_AttackRightLight1"
    local f230_local2 = "W_AttackRightHeavy1Start"
    local f230_local3 = "W_AttackLeftLight1"
    local f230_local4 = "W_AttackLeftHeavy1"
    local f230_local5, f230_local6 = nil
    f230_local0(f230_local1, f230_local2, f230_local3, f230_local4, f230_local5, f230_local6)
end

function AttackBoth_onActivate()
    act(WhiffPossibility)
    act(SetAttackType, ATTACK_TYPE_BOTH_DEFAULT)
    g_MoveSpeedLevelReal = 0
    Speed:SetSpeedZero()
end

function AttackBothLight1_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothLight1_onUpdate()
    act(SwitchMotion, FALSE)
    local f233_local0 = AttackCommonFunction
    local f233_local1 = "W_AttackRightLight2"
    local f233_local2, f233_local3, f233_local4 = nil
    f233_local0(f233_local1, f233_local2, f233_local3, f233_local4, "W_AttackBothLight2", "W_AttackBothHeavy1Sub")
end

function AttackBothLight2_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothLight2_onUpdate()
    act(SwitchMotion, FALSE)
    local f235_local0 = AttackCommonFunction
    local f235_local1 = "W_AttackRightLight3"
    local f235_local2, f235_local3, f235_local4 = nil
    f235_local0(f235_local1, f235_local2, f235_local3, f235_local4, "W_AttackBothLight3", "W_AttackBothHeavy1")
end

function AttackBothLight3_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothLight3_onUpdate()
    act(SwitchMotion, FALSE)
    local f237_local0 = AttackCommonFunction
    local f237_local1 = "W_AttackRightLight2"
    local f237_local2, f237_local3, f237_local4 = nil
    f237_local0(f237_local1, f237_local2, f237_local3, f237_local4, "W_AttackBothLight2", "W_AttackBothHeavy1Sub")
end

function AttackBothHeavy1_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothHeavy1_onUpdate()
    act(SwitchMotion, FALSE)
    local f239_local0 = AttackCommonFunction
    local f239_local1 = nil
    local f239_local2 = "W_AttackRightHeavy1Start"
    local f239_local3, f239_local4 = nil
    f239_local0(f239_local1, f239_local2, f239_local3, f239_local4, "W_AttackBothLight1", "W_AttackBothHeavy2")
end

function AttackBothHeavy1Sub_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothHeavy1Sub_onUpdate()
    act(SwitchMotion, FALSE)
    local f241_local0 = AttackCommonFunction
    local f241_local1 = nil
    local f241_local2 = "W_AttackRightHeavy2Start"
    local f241_local3, f241_local4 = nil
    f241_local0(f241_local1, f241_local2, f241_local3, f241_local4, "W_AttackBothLight1", "W_AttackBothHeavy2")
end

function AttackBothHeavy2_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothHeavy2_onUpdate()
    act(SwitchMotion, FALSE)
    local f243_local0 = AttackCommonFunction
    local f243_local1 = nil
    local f243_local2 = "W_AttackRightHeavy1Start"
    local f243_local3, f243_local4 = nil
    f243_local0(f243_local1, f243_local2, f243_local3, f243_local4, "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackBothDash_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothDash_onUpdate()
    act(SwitchMotion, FALSE)
    local f245_local0 = AttackCommonFunction
    local f245_local1, f245_local2, f245_local3, f245_local4 = nil
    f245_local0(f245_local1, f245_local2, f245_local3, f245_local4, "W_AttackBothStep", "W_AttackBothHeavy2")
end

function AttackBothStep_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothStep_onUpdate()
    act(SwitchMotion, FALSE)
    local f247_local0 = AttackCommonFunction
    local f247_local1, f247_local2, f247_local3, f247_local4 = nil
    f247_local0(f247_local1, f247_local2, f247_local3, f247_local4, "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackBothLightKick_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothLightKick_onUpdate()
    act(SwitchMotion, FALSE)
    local f249_local0 = AttackCommonFunction
    local f249_local1, f249_local2, f249_local3, f249_local4 = nil
    f249_local0(f249_local1, f249_local2, f249_local3, f249_local4, "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackBothHeavyKick_onActivate()
    ResetRequest()
    g_IsAttackStart = TRUE
end

function AttackBothHeavyKick_onUpdate()
    act(SwitchMotion, FALSE)
    local f251_local0 = AttackCommonFunction
    local f251_local1, f251_local2, f251_local3, f251_local4 = nil
    f251_local0(f251_local1, f251_local2, f251_local3, f251_local4, "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function AttackArrow_Activate()
    act(BowTurn, TRUE)
    act(SetBowStance, TRUE)
    act(SyncAtInit_Active, TRUE)
    g_MoveSpeedLevelReal = 0
    Speed:SetSpeedZero()
end

function AttackArrow_Deactivate()
    act(SyncAtInit_Active, FALSE)
    act(SetAttackType, -1)
    act(BowTurn, FALSE)
    act(SetBowStance, FALSE)
end

function AttackArrowStart_onActivate()
    ResetRequest()
end

function AttackArrowStart_onUpdate()
    act(SwitchMotion, FALSE)
    if ArrowCommonFunction() == TRUE then
        act(BowTurn, FALSE)
        return
    end
    if env(GetGeneralTAEFlag, 0) == TRUE then
        if env(IsOutOfAmmo, 0) == TRUE then
            SetVariable("NoAmmo", 1)
        else
            SetVariable("NoAmmo", 0)
        end
    end
    if env(GetGeneralTAEFlag, 0) == TRUE and env(ActionDuration, ACTION_ARM_R1) > 0 then
        act(BowTurn, FALSE)
        ExecEvent("W_AttackArrowLoop")
        return
    end
end

function AttackArrowFire_onActivate()
    ResetRequest()
end

function AttackArrowFire_onUpdate()
    act(SwitchMotion, FALSE)
    if ArrowCommonFunction() == TRUE then
        act(BowTurn, FALSE)
        return
    end
end

function AttackArrowLoop_onActivate()
    ResetRequest()
end

function AttackArrowLoop_onUpdate()
    act(SwitchMotion, FALSE)
    if g_MoveSpeedLevel > 0 then
        MoveStart()
        return
    end
    if ArrowCommonFunction() == TRUE then
        act(BowTurn, FALSE)
        return
    end
    if 0 >= env(ActionDuration, ACTION_ARM_R1) then
        ExecEvent("W_AttackArrowFire")
        return
    end
end

function AttackArrowRelease_onActivate()
    ResetRequest()
    act(BowTurn, FALSE)
end

function AttackArrowRelease_onUpdate()
    act(SwitchMotion, FALSE)
    if ArrowCommonFunction() == TRUE then
        act(BowTurn, FALSE)
        return
    end
end

function StepInFront_onActivate()
    ResetRequest()
    act(ChangeStamina, -25)
end

function StepInFront_onUpdate()
    act(SwitchMotion, FALSE)
    local f263_local0 = AttackCommonFunction
    local f263_local1, f263_local2, f263_local3, f263_local4 = nil
    f263_local0(f263_local1, f263_local2, f263_local3, f263_local4, "StepInSlash", "StepInUppercut")
    Speed:SetSpeedDash()
end

function StepInUppercut_onActivate()
    ResetRequest()
end

function StepInUppercut_onUpdate()
    act(SwitchMotion, FALSE)
    local f265_local0 = AttackCommonFunction
    local f265_local1, f265_local2, f265_local3, f265_local4 = nil
    f265_local0(f265_local1, f265_local2, f265_local3, f265_local4, "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function StepInSlash_onActivate()
    ResetRequest()
end

function StepInSlash_onUpdate()
    act(SwitchMotion, FALSE)
    local f267_local0 = AttackCommonFunction
    local f267_local1, f267_local2, f267_local3, f267_local4 = nil
    f267_local0(f267_local1, f267_local2, f267_local3, f267_local4, "W_AttackBothLight1", "W_AttackBothHeavy1")
end

function StepInDashStart_onActivate()
    ResetRequest()
    SetVariable("LocomotionState", PLAYER_STATE_MOVE)
    g_State = PLAYER_STATE_MOVE
end

function StepInDashStart_onUpdate()
    g_TimeMoveUpdate = g_FrameCount
    g_GuardUpperCondition = 0
end

function StepInDashStart_onDeactivate()
    SetVariable("LocomotionState", PLAYER_STATE_IDLE)
    SetVariable("LowerState", 0)
    g_State = PLAYER_STATE_IDLE
end

function Spin_onActivate()
    ResetRequest()
end

function Spin_onUpdate()
    act(SwitchMotion, FALSE)
    local request = GetAttackRequest()
    if request == ATTACK_REQUEST_SPIN then
        ResetRequest()
        g_SpinAngle = g_MoveAngle
        SetVariable("SpinAngle", g_SpinAngle)
        ExecEvent("SpinSelftrans")
        act(ChangeStamina, -25)
        return TRUE
    end
    local f272_local1 = AttackCommonFunction
    local f272_local2 = "W_AttackRightLightStep"
    local f272_local3 = "W_AttackRightHeavy2Start"
    local f272_local4, f272_local5 = nil
    f272_local1(f272_local2, f272_local3, f272_local4, f272_local5, "W_AttackBothStep", "W_AttackBothHeavy2")
end

function SpinSelftrans_onActivate()
    ResetRequest()
end

function SpinSelftrans_onUpdate()
    act(SwitchMotion, FALSE)
    local request = GetAttackRequest()
    if request == ATTACK_REQUEST_SPIN then
        ResetRequest()
        g_SpinAngle = g_MoveAngle
        SetVariable("SpinAngle", g_SpinAngle)
        ExecEvent("Spin")
        act(ChangeStamina, -25)
        return TRUE
    end
    local f274_local1 = AttackCommonFunction
    local f274_local2 = "W_AttackRightLightStep"
    local f274_local3 = "W_AttackRightHeavy2Start"
    local f274_local4, f274_local5 = nil
    f274_local1(f274_local2, f274_local3, f274_local4, f274_local5, "W_AttackBothStep", "W_AttackBothHeavy2")
end

function SpinLeftAttack_onActivate()
    ResetRequest()
end

function SpinLeftAttack_onUpdate()
    act(SwitchMotion, FALSE)
    local f276_local0 = AttackCommonFunction
    local f276_local1, f276_local2, f276_local3, f276_local4 = nil
    f276_local0(f276_local1, f276_local2, f276_local3, f276_local4, "W_SpinLeftAttack", "W_AttackBothHeavy1")
end

function SpinRightAttack_onActivate()
    ResetRequest()
end

function SpinRightAttack_onUpdate()
    act(SwitchMotion, FALSE)
    local f278_local0 = AttackCommonFunction
    local f278_local1, f278_local2, f278_local3, f278_local4 = nil
    f278_local0(f278_local1, f278_local2, f278_local3, f278_local4, "W_SpinRightAttack", "W_AttackBothHeavy1")
end

function DrawStanceIdle_onActivate()
    ResetRequest()
end

function DrawStanceIdle_onUpdate()
    SetIdleFlag()
    act(SwitchMotion, FALSE)
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
        g_LastDrawStanceFrame = g_FrameCount
        ExecEvent("W_Idle")
        return
    end
    if env(MovementRequest) == TRUE and 0 < g_MoveSpeedLevel then
        ExecEvent("W_DrawStanceMove")
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if env(GetStamina) > 0 then
        if env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE then
            SetVariable("RollingAngle", g_MoveAngle)
            ExecEvent("W_DrawStanceStep")
            act(ChangeStamina, -20)
            return
        end
        if env(ActionRequest, ACTION_ARM_R1) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
            ExecEvent("W_DrawStanceAttackLight")
            return
        elseif env(ActionRequest, ACTION_ARM_R2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
            ExecEvent("W_DrawStanceAttackHeavy")
            return
        end
    end
end

function DrawStanceMove_onActivate()
    ResetRequest()
end

function DrawStanceMove_onUpdate()
    SetIdleFlag()
    act(SwitchMotion, FALSE)
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
        g_LastDrawStanceFrame = g_FrameCount
        ExecEvent("W_Move_Sync")
        return
    end
    if g_MoveSpeedLevel <= 0 then
        ExecEvent("W_DrawStanceIdle")
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if env(GetStamina) > 0 then
        if env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE then
            SetVariable("RollingAngle", g_MoveAngle)
            ExecEvent("W_DrawStanceStep")
            act(ChangeStamina, -20)
            return
        end
        if env(ActionRequest, ACTION_ARM_R1) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
            ExecEvent("W_DrawStanceAttackLight")
            return
        elseif env(ActionRequest, ACTION_ARM_R2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
            ExecEvent("W_DrawStanceAttackHeavy")
            return
        end
    end
end

function DrawStanceAttackLight_onActivate()
    ResetRequest()
end

function DrawStanceAttackLight_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE then
        ExecEvent("W_Idle")
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
        g_LastDrawStanceFrame = g_FrameCount
        ExecEvent("W_DrawStanceMove")
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if env(GetStamina) > 0 then
        if env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE then
            SetVariable("RollingAngle", g_MoveAngle)
            ExecEvent("W_DrawStanceStep")
            act(ChangeStamina, -20)
            return
        end
        if env(ActionRequest, ACTION_ARM_R1) == TRUE then
            ResetRequest()
            ExecEvent("W_DrawStanceAttackLight")
            return
        elseif env(ActionRequest, ACTION_ARM_R2) == TRUE then
            ExecEvent("W_DrawStanceAttackHeavy")
            return
        end
    end
end

function DrawStanceAttackHeavy_onActivate()
    ResetRequest()
end

function DrawStanceAttackHeavy_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
        g_LastDrawStanceFrame = g_FrameCount
        ExecEvent("W_Idle")
        return
    end
    if env(MovementRequest) == TRUE and 0 < g_MoveSpeedLevel then
        ExecEvent("W_DrawStanceMove")
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if env(GetStamina) > 0 then
        if env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE then
            SetVariable("RollingAngle", g_MoveAngle)
            ExecEvent("W_DrawStanceStep")
            act(ChangeStamina, -20)
            return
        end
        if env(ActionRequest, ACTION_ARM_R1) == TRUE then
            ExecEvent("W_DrawStanceAttackLight")
            return
        elseif env(ActionRequest, ACTION_ARM_R2) == TRUE then
            ResetRequest()
            ExecEvent("W_DrawStanceAttackHeavy")
            return
        end
    end
end

function DrawStanceAttackDashLight_onActivate()
    ResetRequest()
end

function DrawStanceAttackDashLight_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE then
        ExecEvent("W_Idle")
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
        g_LastDrawStanceFrame = g_FrameCount
        ExecEvent("W_DrawStanceMove")
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if env(GetStamina) > 0 then
        if env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE then
            SetVariable("RollingAngle", g_MoveAngle)
            ExecEvent("W_DrawStanceStep")
            act(ChangeStamina, -20)
            return
        end
        if env(ActionRequest, ACTION_ARM_R1) == TRUE then
            ResetRequest()
            ExecEvent("W_DrawStanceAttackLight")
            return
        elseif env(ActionRequest, ACTION_ARM_R2) == TRUE then
            ExecEvent("W_DrawStanceAttackHeavy")
            return
        end
    end
end

function DrawStanceAttackDashHeavy_onActivate()
    ResetRequest()
end

function DrawStanceAttackDashHeavy_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    act(SetMovementScaleMult, 1.2000000476837158)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
        g_LastDrawStanceFrame = g_FrameCount
        ExecEvent("W_Idle")
        return
    end
    if env(MovementRequest) == TRUE and 0 < g_MoveSpeedLevel then
        ExecEvent("W_DrawStanceMove")
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if env(GetStamina) > 0 then
        if env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE then
            SetVariable("RollingAngle", g_MoveAngle)
            ExecEvent("W_DrawStanceStep")
            act(ChangeStamina, -20)
            return
        end
        if env(ActionRequest, ACTION_ARM_R1) == TRUE then
            ExecEvent("W_DrawStanceAttackLight")
            return
        elseif env(ActionRequest, ACTION_ARM_R2) == TRUE then
            ResetRequest()
            ExecEvent("W_DrawStanceAttackHeavy")
            return
        end
    end
end

function DrawStanceStep_onActivate()
    ResetRequest()
end

function DrawStanceStep_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetAllowedThrowAttackType, THROW_STATE_DEFAULT)
    act(SetAllowedThrowDefenseType, THROW_STATE_DEFAULT)
    act(SetMovementScaleMult, 0.699999988079071)
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
    if env(ActionRequest, ACTION_ARM_L2) == TRUE and g_FrameCount - g_LastDrawStanceFrame > 5 then
        g_LastDrawStanceFrame = g_FrameCount
        ExecEvent("W_Idle")
        return
    end
    if env(MovementRequest) == TRUE and 0 < g_MoveSpeedLevel then
        ExecEvent("W_DrawStanceMove")
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecItem() == TRUE then
        return
    end
    if env(GetStamina) > 0 then
        if env(ActionRequest, ACTION_ARM_ROLLING) == TRUE or env(ActionRequest, ACTION_ARM_BACKSTEP) == TRUE then
            SetVariable("RollingAngle", g_MoveAngle)
            ExecEvent("W_DrawStanceStep")
            ResetRequest()
            act(ChangeStamina, -20)
            return
        end
        if env(ActionRequest, ACTION_ARM_R1) == TRUE then
            if env(GetGeneralTAEFlag, 11) == TRUE then
                ExecEvent("W_DrawStanceAttackDashLight")
                return
            else
                ExecEvent("W_DrawStanceAttackLight")
                return
            end
        elseif env(ActionRequest, ACTION_ARM_R2) == TRUE then
            if env(GetGeneralTAEFlag, 11) == TRUE then
                ExecEvent("W_DrawStanceAttackDashHeavy")
                return
            else
                ExecEvent("W_DrawStanceAttackHeavy")
                return
            end
        end
    end
end

function QuickItemThrowKnife_onActivate()
    ResetRequest()
end

function QuickItemThrowKnife_onUpdate()
    act(SwitchMotion, FALSE)
    AttackCommonFunction(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2)
end

function WeaponChangeStart_onActivate()
    ResetRequest()
end

function WeaponChangeStart_onUpdate()
    g_IsHalfBlend = TRUE
    WeaponChangeCommonFunction()
end

function WeaponChangeEnd_onActivate()
    ResetRequest()
end

function WeaponChangeEnd_onUpdate()
    g_IsHalfBlend = TRUE
    WeaponChangeCommonFunction()
    if env(GetGeneralTAEFlag, TAE_FLAG_WEAPONCHANGE_END) == TRUE then
        g_IsHalfBlend = FALSE
        if g_State == PLAYER_STATE_MOVE then
            ExecEvent("W_Lower")
            return
        else
            ExecEvents("W_Lower", "Idle_wild")
            return
        end
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
end

function WeaponQuickChange_onActivate()
    ResetRequest()
end

function WeaponQuickChange_onUpdate()
    act(SwitchMotion, FALSE)
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecFallStart(FALSE) == TRUE then
        return TRUE
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return TRUE
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return TRUE
    end
    if ExecEvasion(FALSE) == TRUE then
        return TRUE
    end
    if ExecItem() == TRUE then
        return TRUE
    end
    if ExecAttack(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2) == TRUE then
        return TRUE
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return TRUE
    end
end

function HandChangeStart_onActivate()
    ResetRequest()
end

function HandChangeStart_onUpdate()
    if g_State == PLAYER_STATE_MOVE then
        g_IsHalfBlend = TRUE
    end
    HandChangeCommonFunction()
end

function HandChangeEnd_onActivate()
    ResetRequest()
end

function HandChangeEnd_onUpdate()
    if g_State == PLAYER_STATE_MOVE then
        g_IsHalfBlend = TRUE
    end
    HandChangeCommonFunction()
    if env(GetGeneralTAEFlag, TAE_FLAG_WEAPONCHANGE_END) == TRUE then
        g_IsHalfBlend = FALSE
        if g_State == PLAYER_STATE_MOVE then
            ExecEvent("W_Lower")
            return
        else
            ExecEvents("W_Lower", "Idle_wild")
            return
        end
    end
    if ExecHandChange(HAND_RIGHT, FALSE) == TRUE then
        return
    end
    if ExecWeaponChange() == TRUE then
        return
    end
end

function HandQuickChange_onActivate()
    ResetRequest()
end

function HandQuickChange_onUpdate()
    act(SwitchMotion, FALSE)
    if ExecDamage() == TRUE then
        return TRUE
    end
    if ExecFallStart(FALSE) == TRUE then
        return TRUE
    end
    if ExecGuardOnCancelTiming() == TRUE then
        return TRUE
    end
    if ExecWeaponChange() == TRUE then
        return
    end
    if ExecEvasion(FALSE) == TRUE then
        return TRUE
    end
    if ExecItem() == TRUE then
        return TRUE
    end
    if ExecAttack(g_r1, g_r2, g_l1, g_l2, g_b1, g_b2) == TRUE then
        return TRUE
    end
    if MoveStart(nil) == TRUE then
        g_TimeMoveStop = -1
        return TRUE
    end
end

function ArrowChange_onActivate()
    ResetRequest()
end

function ArrowChange_onUpdate()
    g_IsHalfBlend = TRUE
    ArrowChangeCommonFunction()
end

function ItemWeaponRecover_onActivate()
    ResetRequest()
end

function ItemWeaponRecover_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemWeaponEnchant_onActivate()
    ResetRequest()
end

function ItemWeaponEnchant_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemThrowKnife_onActivate()
    ResetRequest()
end

function ItemThrowKnife_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemThrowBottle_onActivate()
    ResetRequest()
end

function ItemThrowBottle_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemMeganeStart_onActivate()
    ResetRequest()
end

function ItemMeganeStart_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemMeganeLoop_onActivate()
    ResetRequest()
end

function ItemMeganeLoop_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemMeganeEnd_onActivate()
    ResetRequest()
end

function ItemMeganeEnd_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemWeaponRepair_onActivate()
    ResetRequest()
end

function ItemWeaponRepair_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemSoul_onActivate()
    ResetRequest()
end

function ItemSoul_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemDrinkStart_onActivate()
    ResetRequest()
end

function ItemDrinkStart_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemDrinkNothing_onActivate()
    ResetRequest()
end

function ItemDrinkNothing_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemDrinking_onActivate()
    ResetRequest()
end

function ItemDrinking_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemDrinkEnd_onActivate()
    ResetRequest()
end

function ItemDrinkEnd_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemInvalid_onActivate()
    ResetRequest()
end

function ItemInvalid_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemShockWeaveStart_onActivate()
    ResetRequest()
end

function ItemShockWeaveStart_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function ItemShockWeaveEnd_onActivate()
    ResetRequest()
end

function ItemShockWeaveEnd_onUpdate()
    act(SwitchMotion, FALSE)
    ItemCommonFunction()
end

function Gesture_onActivate()
    ResetRequest()
end

function Gesture_onUpdate()
    act(SwitchMotion, FALSE)
    GestureCommonFunction()
end

function MagicLaunch_onActivate()
    ResetRequest()
    g_MagicCondition = 1
    g_IsMagicCharging = 1
end

function MagicLaunch_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 1
    if MagicCommonFunction() == TRUE then
        return
    end
    if env(GetGeneralTAEFlag, 1) == 1 then
        if hkbGetVariable("IndexMagicHand") == 0 and 1 <= env(ActionDuration, ACTION_ARM_L2) then
            ExecEvent("W_MagicDouble")
            return
        elseif hkbGetVariable("IndexMagicHand") == 1 and 1 <= env(ActionDuration, ACTION_ARM_R2) then
            ExecEvent("W_MagicDouble")
            return
        end
    end
    if hkbGetVariable("IndexMagicHand") == 0 and env(ActionDuration, ACTION_ARM_L1) <= 0 then
        g_IsMagicCharging = 0
    elseif hkbGetVariable("IndexMagicHand") == 1 and env(ActionDuration, ACTION_ARM_R1) <= 0 then
        g_IsMagicCharging = 0
    end
    if env(GetGeneralTAEFlag, 0) == 1 and g_IsMagicCharging == 1 then
        ExecEvent("W_MagicCharge")
        return
    end
end

function MagicLaunch_onDeactivate()
    g_MagicCondition = 0
end

function MagicDouble_onActivate()
    ResetRequest()
    SetVariable("MagicChargeIndex", 0)
    chargetime = 0
    g_MagicCondition = 1
    g_IsMagicCharging = 1
end

function MagicDouble_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 1
    if MagicCommonFunction() == TRUE then
        return
    end
    if hkbGetVariable("IndexMagicHand") == 0 and 0 >= env(ActionDuration, ACTION_ARM_L1) then
        g_IsMagicCharging = 0
    elseif hkbGetVariable("IndexMagicHand") == 1 and 0 >= env(ActionDuration, ACTION_ARM_R1) then
        g_IsMagicCharging = 0
    end
    if env(GetGeneralTAEFlag, 0) == 1 then
        if g_IsMagicCharging == 1 then
            SetVariable("MagicChargeIndex", 0)
            chargetime = 0
            ExecEvent("W_MagicChargeDouble")
            return
        else
            g_IsMagicCharging = 0
            SetVariable("MagicChargeIndex", 0)
            chargetime = 0
            ExecEvent("W_MagicDoubleFire")
            return
        end
    end
end

function MagicDouble_onDeactivate()
    g_MagicCondition = 0
end

local chargestart = 0
local chargetime = 0

function MagicCharge_onActivate()
    ResetRequest()
    g_MagicCondition = 1
    g_IsMagicCharging = 1
    chargestart = g_FrameCount
end

function MagicCharge_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 1
    if MagicCommonFunction() == TRUE then
        ResetRequest()
        SetVariable("MagicChargeIndex", 0)
        g_IsMagicCharging = 0
        g_MagicCondition = 0
        return
    end
    if env(GetGeneralTAEFlag, 1) == 1 then
        if hkbGetVariable("IndexMagicHand") == 0 and 1 <= env(ActionDuration, ACTION_ARM_L2) then
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicDouble")
            return
        elseif hkbGetVariable("IndexMagicHand") == 1 and 1 <= env(ActionDuration, ACTION_ARM_R2) then
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicDouble")
            return
        end
    end
    if 0 < g_MoveSpeedLevel then
        ExecEvents("W_Move", "W_Magic_Upper_Continue")
    end
    if hkbGetVariable("IndexMagicHand") == 0 and 0 < env(ActionDuration, ACTION_ARM_R1) then
        ExecEvents("LayerLeftArmIn", "W_AttackRightLight1")
    end
    if hkbGetVariable("IndexMagicHand") == 0 and 0 >= env(ActionDuration, ACTION_ARM_L1) then
        g_IsMagicCharging = 0
    elseif hkbGetVariable("IndexMagicHand") == 1 and 0 >= env(ActionDuration, ACTION_ARM_R1) then
        g_IsMagicCharging = 0
    end
    if hkbGetVariable("IndexMagicHand") == 0 and 0 <= env(ActionDuration, ACTION_ARM_L1) then
        chargetime = g_FrameCount - chargestart
    elseif hkbGetVariable("IndexMagicHand") == 1 and 0 <= env(ActionDuration, ACTION_ARM_R1) then
        chargetime = g_FrameCount - chargestart
    end
    if chargetime >= 60 then
        SetVariable("MagicChargeIndex", 1)
    end
    if hkbGetVariable("IndexMagicHand") == 0 and 0 >= env(ActionDuration, ACTION_ARM_L1) then
        if hkbGetVariable("MagicChargeIndex") == 1 then
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicChargeFire")
            return
        else
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicFire")
            return
        end
    elseif hkbGetVariable("IndexMagicHand") == 1 and 0 >= env(ActionDuration, ACTION_ARM_R1) then
        if hkbGetVariable("MagicChargeIndex") == 1 then
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicChargeFire")
            return
        else
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicFire")
            return
        end
    end
end

function MagicCharge_onDeactivate()
    g_MagicCondition = 0
end

function MagicChargeDouble_onActivate()
    ResetRequest()
    g_MagicCondition = 1
    g_IsMagicCharging = 1
    chargestart = g_FrameCount
end

function MagicChargeDouble_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 1
    if MagicCommonFunction() == TRUE then
        ResetRequest()
        SetVariable("MagicChargeIndex", 0)
        g_IsMagicCharging = 0
        g_MagicCondition = 0
        return
    end
    if 0 < g_MoveSpeedLevel then
        ExecEvents("W_Move", "W_Magic_Upper_Continue")
    end
    if hkbGetVariable("IndexMagicHand") == 0 and 0 <= env(ActionDuration, ACTION_ARM_L1) then
        chargetime = g_FrameCount - chargestart
    elseif hkbGetVariable("IndexMagicHand") == 1 and 0 <= env(ActionDuration, ACTION_ARM_R1) then
        chargetime = g_FrameCount - chargestart
    end
    if chargetime >= 60 then
        SetVariable("MagicChargeIndex", 1)
    end
    if hkbGetVariable("IndexMagicHand") == 0 and 0 >= env(ActionDuration, ACTION_ARM_L1) then
        if hkbGetVariable("MagicChargeIndex") == 1 then
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicChargeDoubleFire")
            return
        else
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEventw("W_Lower", "W_MagicDoubleFire")
            return
        end
    elseif hkbGetVariable("IndexMagicHand") == 1 and 0 >= env(ActionDuration, ACTION_ARM_R1) then
        if hkbGetVariable("MagicChargeIndex") == 1 then
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicChargeDoubleFire")
            return
        else
            g_IsMagicCharging = 0
            g_MagicCondition = 0
            SetVariable("MagicChargeIndex", 0)
            ExecEvents("W_Lower", "W_MagicDoubleFire")
            return
        end
    end
end

function MagicFire_onActivate()
    ResetRequest()
    g_MagicCondition = 2
end

function MagicFire_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 2
    if env(GetGeneralTAEFlag, 0) == TRUE then
        if g_State == PLAYER_STATE_MOVE then
            ExecEvent("W_Lower")
        else
            ExecEvents("W_Lower", "Idle_wild")
        end
    end
    if MagicCommonFunction() == TRUE then
        return
    end
end

function MagicFire_onDeactivate()
    g_MagicCondition = 0
end

function MagicChargeFire_onActivate()
    ResetRequest()
    g_MagicCondition = 2
end

function MagicChargeFire_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 2
    if env(GetGeneralTAEFlag, 0) == TRUE then
        if g_State == PLAYER_STATE_MOVE then
            ExecEvent("W_Lower")
        else
            ExecEvents("W_Lower", "Idle_wild")
        end
    end
    if MagicCommonFunction() == TRUE then
        return
    end
end

function MagicChargeFire_onDeactivate()
    g_MagicCondition = 0
end

function MagicDoubleFire_onActivate()
    ResetRequest()
    g_MagicCondition = 2
end

function MagicDoubleFire_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 2
    if env(GetGeneralTAEFlag, 0) == TRUE then
        if g_State == PLAYER_STATE_MOVE then
            ExecEvent("W_Lower")
        else
            ExecEvents("W_Lower", "Idle_wild")
        end
    end
    if MagicCommonFunction() == TRUE then
        return
    end
end

function MagicDoubleFire_onDeactivate()
    g_MagicCondition = 0
end

function MagicChargeDoubleFire_onActivate()
    ResetRequest()
    g_MagicCondition = 2
end

function MagicChargeDoubleFire_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 2
    if env(GetGeneralTAEFlag, 0) == TRUE then
        if g_State == PLAYER_STATE_MOVE then
            ExecEvent("W_Lower")
        else
            ExecEvents("W_Lower", "Idle_wild")
        end
    end
    if MagicCommonFunction() == TRUE then
        return
    end
end

function MagicChargeDoubleFire_onDeactivate()
    g_MagicCondition = 0
end

function MagicInvalid_onActivate()
    ResetRequest()
    g_MagicCondition = 3
end

function MagicInvalid_onUpdate()
    act(SwitchMotion, FALSE)
    g_MagicCondition = 3
    if MagicCommonFunction() == TRUE then
    end
end

function MagicInvalid_onDeactivate()
    g_MagicCondition = 0
end

function Throw_onActivate()
    local ThrowId = env(GetThrowAnimID)
    SetVariable("ThrowID", ThrowId)
end

function Throw_onDeactivate()
    act(ForceCancelThrowAnim)
    act(RequestThrowAnimInterrupt)
end

function ThrowAtk_onActivate()
    ResetRequest()
    ExecEvent("W_LowerContinue")
end

function ThrowAtk_onUpdate()
    local ThrowID = hkbGetVariable("ThrowID")
    act(SwitchMotion, FALSE)
    if ThrowCommonFunction() == TRUE then
        act(ForceCancelThrowAnim)
        act(RequestThrowAnimInterrupt)
    end
end

function ThrowDef_onActivate()
    ResetRequest()
    ExecEvent("W_LowerContinue")
end

function ThrowDef_onUpdate()
    act(SwitchMotion, FALSE)
    if env(GetGeneralTAEFlag, 0) == TRUE and 0 >= g_HP then
        ExecEvent("ThrowDeath")
        return
    end
    if env(IsThrowSuccess) == TRUE then
        ExecEvent("W_ThrowEscape")
        return
    end
    if ThrowCommonFunction() == TRUE then
        act(ForceCancelThrowAnim)
        act(RequestThrowAnimInterrupt)
        return
    end
end

function ThrowCollision_onActivate()
    ResetRequest()
end

function ThrowCollision_onUpdate()
    act(SwitchMotion, FALSE)
    if env(IsTruelyLanding) == TRUE then
    end
    if ThrowCollisionCommonFunction() == TRUE then
        act(ForceCancelThrowAnim)
        act(RequestThrowAnimInterrupt)
    end
end

function ThrowFall_onActivate()
    ResetRequest()
end

function ThrowFall_onUpdate()
    act(SwitchMotion, FALSE)
    ThrowCollisionCommonFunction()
end

function ThrowLand_onActivate()
    ResetRequest()
end

function ThrowLand_onUpdate()
    act(SwitchMotion, FALSE)
    if env(GetGeneralTAEFlag, 0) == TRUE and 0 >= g_HP then
        ExecEvent("ThrowLandDeath")
    end
end

function ThrowEscape_onActivate()
    ResetRequest()
end

function ThrowEscape_onUpdate()
    act(SwitchMotion, FALSE)
    if ThrowCommonFunction() == TRUE then
        act(ForceCancelThrowAnim)
        act(RequestThrowAnimInterrupt)
        return
    end
end

function ThrowLandDeath_onActivate()
    act(SetThrowState, THROW_TYPE_DEATH)
end

function ThrowLandDeath_onUpdate()
    act(SwitchMotion, FALSE)
end

function ThrowLandDeathIdle_onActivate()
    act(SetThrowState, THROW_TYPE_INVALID)
end

function ThrowLandDeathIdle_onUpdate()
    act(SwitchMotion, FALSE)
end

function ThrowDeath_onActivate()
    act(SetThrowState, THROW_TYPE_DEATH)
end

function ThrowDeath_onUpdate()
    act(SwitchMotion, FALSE)
end

function ThrowDeathIdle_onActivate()
    act(SetThrowState, THROW_TYPE_INVALID)
end

function ThrowDeathIdle_onUpdate()
    act(SwitchMotion, FALSE)
end

local TestFlame = -1
local TestBlendrate = 0
local EVENT_BLEND_RATE = 30

function Event_onActivate()
    if hkbGetVariable("TestIsEventBlend") then
        TestFlame = -1
        SetVariable("TestEventBlend_Move", 1)
        SetVariable("TestEventBlend_Event", 0)
        TestBlendrate = 0
        EVENT_BLEND_RATE = hkbGetVariable("TestBlendRate")
    end
end

function Event_onUpdate()
    if hkbGetVariable("TestIsEventBlend") then
        TestBlendrate = TestBlendrate + 1
        SetVariable("TestEventBlend_Move", 1 - TestBlendrate / EVENT_BLEND_RATE)
        SetVariable("TestEventBlend_Event", TestBlendrate / EVENT_BLEND_RATE)
    end
end

function Event7000_onActivate()
    ResetRequest()
end

function Event7000_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7110_onActivate()
    ResetRequest()
end

function Event7110_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7111_onActivate()
    ResetRequest()
end

function Event7111_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7112_onActivate()
    ResetRequest()
end

function Event7112_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7113_onActivate()
    ResetRequest()
end

function Event7113_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7114_onActivate()
    ResetRequest()
end

function Event7114_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7115_onActivate()
    ResetRequest()
end

function Event7115_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7120_onActivate()
    ResetRequest()
end

function Event7120_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7121_onActivate()
    ResetRequest()
end

function Event7121_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7410_onActivate()
    ResetRequest()
end

function Event7410_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7411_onActivate()
    ResetRequest()
end

function Event7411_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7412_onActivate()
    ResetRequest()
end

function Event7412_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7413_onActivate()
    ResetRequest()
end

function Event7413_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7414_onActivate()
    ResetRequest()
end

function Event7414_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7500_onActivate()
    ResetRequest()
end

function Event7500_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7501_onActivate()
    ResetRequest()
end

function Event7501_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7503_onActivate()
    ResetRequest()
end

function Event7503_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7520_onActivate()
    ResetRequest()
end

function Event7520_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7521_onActivate()
    ResetRequest()
end

function Event7521_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7522_onActivate()
    ResetRequest()
end

function Event7522_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event7905_onActivate()
    ResetRequest()
end

function Event7905_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event8000_onActivate()
    ResetRequest()
end

function Event8000_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event8002_onActivate()
    ResetRequest()
end

function Event8002_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event8279_onActivate()
    ResetRequest()
end

function Event8279_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event9998_onActivate()
    ResetRequest()
    ExecEvent("W_Idle")
end

function Event9999_onActivate()
    ResetRequest()
end

function Event9999_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event60732_onActivate()
    ResetRequest()
end

function Event60732_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event60733_onActivate()
    ResetRequest()
end

function Event60733_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event60750_onActivate()
    ResetRequest()
end

function Event60750_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event60760_onActivate()
    ResetRequest()
end

function Event60760_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event60770_onActivate()
    ResetRequest()
end

function Event60770_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event60780_onActivate()
    ResetRequest()
end

function Event60780_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event60790_onActivate()
    ResetRequest()
end

function Event60790_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

function Event60800_onActivate()
    ResetRequest()
end

function Event60800_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
    EventCommonFunction()
end

local TestAbandonedTime = -1

function Abandoned_onActivate()
    TestAbandonedTime = g_FrameCount
end

function Abandoned_onUpdate()
    if TestAbandonedTime + 20 < g_FrameCount and 100 < env(ActionDuration, ACTION_ARM_ACTION) then
        IncNum(1)
        ExecEvent("W_DamageExLarge")
        act(SendMessageIDToEvents, 511099)
    end
end

function BonfireInitialize_onActivate()
    ResetRequest()
end

function BonfireInitialize_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
end

function BonfireStart_onActivate()
    ResetRequest()
end

function BonfireStart_onUpdate()
    act(SwitchMotion, FALSE)
    if env(GetGeneralTAEFlag, 0) == TRUE then
        act(SetIsEventAnim)
    end
end

function BonfireLoop_onActivate()
    ResetRequest()
end

function BonfireLoop_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
end

function BonfireEnd_onActivate()
    ResetRequest()
end

function BonfireEnd_onUpdate()
    act(SwitchMotion, FALSE)
    act(SetIsEventAnim)
end

function CultIdle_onActivate()
    ResetRequest()
end

function CultIdle_onUpdate()
    act(SetCeremonyState, CULT_STATE_IDLE)
    if g_MoveSpeedLevel > 0 then
        act(SendMessageIDToEvents, 90000)
        act(SetCeremonyState, CULT_STATE_MOVE)
        ExecEvent("CultMove")
        return
    end
    if 0 >= env(ActionDuration, ACTION_ARM_ACTION) then
        act(SetCeremonyState, CULT_STATE_RELESE)
        ExecEvent("CultRelease")
        return
    end
    if ExecDamage() == TRUE then
        act(SetCeremonyState, CULT_STATE_RELESE)
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        act(SetCeremonyState, CULT_STATE_RELESE)
        return
    end
end

function CultMove_onActivate()
    ResetRequest()
end

function CultMove_onUpdate()
    act(SetCeremonyState, CULT_STATE_MOVE)
    if g_MoveSpeedLevel <= 0 then
        act(SetCeremonyState, CULT_STATE_IDLE)
        act(SendMessageIDToEvents, 90001)
        ExecEvent("CultIdle")
        return
    end
    if 0 >= env(ActionDuration, ACTION_ARM_ACTION) then
        act(SetCeremonyState, CULT_STATE_RELESE)
        ExecEvent("CultRelease")
        return
    end
    if ExecDamage() == TRUE then
        act(SetCeremonyState, CULT_STATE_FORCE_RELEASE)
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        act(SetCeremonyState, CULT_STATE_FORCE_RELEASE)
        return
    end
end

function CultCatch_onActivate()
    ResetRequest()
end

function CultCatch_onUpdate()
    act(SwitchMotion, FALSE)
    if ExecDamage() == TRUE then
        act(SetCeremonyState, CULT_STATE_FORCE_RELEASE)
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        act(SetCeremonyState, CULT_STATE_FORCE_RELEASE)
        return
    end
end

function CultRelease_onActivate()
    ResetRequest()
end

function CultRelease_onUpdate()
    act(SwitchMotion, FALSE)
end

function PursuerIdle_onActivate()
    ResetRequest()
end

function PursuerIdle_onUpdate()
    if g_EventCommand == 7796 or g_IsForceReturn == TRUE then
        g_IsForceReturn = TRUE
        ExecEvent("Idle_wild")
        return
    end
    if g_MoveSpeedLevel > 0 then
        ExecEvent("PursuerMove")
        return
    end
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
end

function PursuerMove_onActivate()
    ResetRequest()
end

function PursuerMove_onUpdate()
    if g_EventCommand == 7796 or g_IsForceReturn == TRUE then
        g_IsForceReturn = TRUE
        ExecEvent("W_Move")
        return
    end
    if g_MoveSpeedLevel <= 0 then
        ExecEvent("PursuerIdle")
        return
    end
    if ExecDamage() == TRUE then
        return
    end
    if ExecFallStart(FALSE) == TRUE then
        return
    end
end

function Ladder_onActivate()
    act(SetIsEventActionPossible, FALSE)
end

function Ladder_onDeactivate()
    g_IsLadder = FALSE
    act(SetUnableToFall, FALSE)
    act(SetIsEventActionPossible, TRUE)
end

function LadderStartBottom_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
end

function LadderStartBottom_onUpdate()
    act(SwitchMotion, FALSE)
    LadderUpdate()
end

function LadderUpRight_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
end

function LadderUpRight_onUpdate()
    act(SwitchMotion, FALSE)
    if LadderCommonFunction() == TRUE then
        return
    end
    if LadderUpdate() == TRUE then
        return
    end
end

function LadderUpLeft_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
end

function LadderUpLeft_onUpdate()
    act(SwitchMotion, FALSE)
    if LadderCommonFunction() == TRUE then
        return
    end
    if LadderUpdate() == TRUE then
        return
    end
end

function LadderDownLeft_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
end

function LadderDownLeft_onUpdate()
    act(SwitchMotion, FALSE)
    if LadderCommonFunction() == TRUE then
        return
    end
    if LadderUpdate() == TRUE then
        return
    end
end

function LadderDownRight_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
end

function LadderDownRight_onUpdate()
    act(SwitchMotion, FALSE)
    if LadderCommonFunction() == TRUE then
        return
    end
    if LadderUpdate() == TRUE then
        return
    end
end

function LadderEndBottomLeft_onActivate()
    g_IsLadder = FALSE
end

function LadderEndBottomLeft_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderEndBottomRight_onActivate()
    g_IsLadder = FALSE
end

function LadderEndBottomRight_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderEndTopLeft_onActivate()
    g_IsLadder = FALSE
end

function LadderEndTopLeft_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderEndTopRight_onActivate()
    g_IsLadder = FALSE
end

function LadderEndTopRight_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderStartTop_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
end

function LadderStartTop_onUpdate()
    act(SwitchMotion, FALSE)
    if LadderCommonFunction() == TRUE then
        return
    end
    if LadderUpdate() == TRUE then
        return
    end
end

function LadderIdleLeft_onActivate()
    ResetRequest()
    LadderSetEnterState(TRUE)
    act(SetLadderActionState, 8)
end

function LadderIdleLeft_onUpdate()
    act(SwitchMotion, FALSE)
    g_IsLadderDamage = env(HasReceivedAnyDamage)
    if LadderUpdateIdle() == TRUE then
        return
    end
    LadderAttack()
end

function LadderIdleRight_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
    act(SetLadderActionState, 9)
end

function LadderIdleRight_onUpdate()
    act(SwitchMotion, FALSE)
    g_IsLadderDamage = env(HasReceivedAnyDamage)
    if LadderUpdateIdle() == TRUE then
        return
    end
    LadderAttack()
end

function LadderAttackUpRight_onActivate()
    ResetRequest()
end

function LadderAttackUpRight_onUpdate()
    act(SwitchMotion, FALSE)
    if LadderCommonFunction() == TRUE then
        return
    end
    if env(IsMoveCancelPossible) == TRUE then
        ExecEvent("W_LadderIdleLeft")
    end
end

function LadderAttackUpLeft_onActivate()
    ResetRequest()
end

function LadderAttackUpLeft_onUpdate()
    act(SwitchMotion, FALSE)
    if env(IsMoveCancelPossible) == TRUE then
        ExecEvent("W_LadderIdleRight")
    end
end

function LadderAttackDownRight_onActivate()
    ResetRequest()
end

function LadderAttackDownRight_onUpdate()
    act(SwitchMotion, FALSE)
    if env(IsMoveCancelPossible) == TRUE then
        ExecEvent("W_LadderIdleRight")
    end
end

function LadderAttackDownLeft_onActivate()
    ResetRequest()
end

function LadderAttackDownLeft_onUpdate()
    act(SwitchMotion, FALSE)
    if env(IsMoveCancelPossible) == TRUE then
        ExecEvent("W_LadderIdleLeft")
    end
end

function LadderCoastStart_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
    g_LadderExitCondition = LADDER_ACTION_COAST_RIGHT
end

function LadderCoastStart_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderCoastRight_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
    g_LadderExitCondition = LADDER_ACTION_COAST_RIGHT
end

function LadderCoastRight_onUpdate()
    act(SwitchMotion, FALSE)
    LadderCoast(LADDER_HAND_RIGHT)
end

function LadderCoastStop_onActivate()
    ResetRequest()
    LadderSetEnterState(FALSE)
    g_LadderExitCondition = LADDER_ACTION_COAST_RIGHT
end

function LadderCoastStop_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderCoastLanding_onActivate()
    g_IsLadder = FALSE
end

function LadderCoastLanding_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderCoastLeft_onUpdate()
    act(SwitchMotion, FALSE)
    LadderCoast(LADDER_HAND_LEFT)
end

function LadderDamageLargeRight_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderDamageSmallRight_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderDamageLargeLeft_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderDamageSmallLeft_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderDeathStart_onActivate()
    act(SetHandStateOfLadder, -1)
    act(SetUnableToFall, FALSE)
    g_IsLadder = FALSE
end

function LadderDeathStart_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderDeathLoop_onUpdate()
    act(SwitchMotion, FALSE)
    if env(IsLanding) == TRUE then
        ExecEvent("LadderDeathLand")
    end
end

function LadderDeathLand_onActivate()
    g_IsLadder = FALSE
end

function LadderDeathLand_onUpdate()
    act(SwitchMotion, FALSE)
end

function LadderDeathIdle_onUpdate()
    act(SwitchMotion, FALSE)
end

function Initialize()
    Speed = SpeedControll.New()
    LStick = Stick.New()
    Speed:SetStatePoints(0, 0, SPEED_STATE_START_DASH, 1, SPEED_STATE_START_DASH + 4, 1, MAX_SPEED_LEVEL, 2)
end

function SetDefaultFlag()
    act(SetAllowedThrowAttackType, THROW_STATE_INVALID)
    act(SetAllowedThrowDefenseType, THROW_STATE_INVALID)
    if g_IsLadder == FALSE then
        act(SetLadderActionState, LADDER_ACTION_INVALID)
    end
    act(SetAttackType, ATTACK_TYPE_INVALID)
    act(SwitchMotion, TRUE)
    act(SetAIBusyDoingAction, TRUE)
    if hkbIsNodeActive("Item_SM") then
        act(SetIsItemInUse, TRUE)
    else
        act(SetIsItemInUse, FALSE)
    end
end

function Update()
    act(SetCanChangeEquipmentOn)
    SetVariable("EnablePowerRagdoll", false)
    g_MoveSpeedLevel = hkbGetVariable("MoveSpeedLevel")
    g_IsLockon = hkbGetVariable("IsLockon")
    g_MoveAngle = hkbGetVariable("MoveAngle")
    g_SpinAngle = hkbGetVariable("MoveAngle")
    g_HP = env(GetHP)
    g_FrameCount = g_FrameCount + 1
    g_EventCommand = env(GetCommandIDFromEvent, 0)
    LStick:ReserveLStick()
    SetDefaultFlag()
    SetWeightIndex()
    g_MaxStamina = env(GetMaxStamina)
    g_CurrentStamina = env(GetStamina)
    g_StaminaPercentage = g_CurrentStamina / g_MaxStamina
    SetVariable("StaminaPercentage", g_StaminaPercentage)
    g_ForwardLeg = hkbGetVariable("IsRightFootForward")
    if 0 < g_IsMagicCharging then
    end
end

function ModifiersLayer_onGenerate()
end

------------------------------------------
-- Core: Helper Functions
------------------------------------------
function Contains(tab, val)
    for index, value in ipairs(tab) do
        if value == val then
            return TRUE
        end
    end

    return FALSE
end

------------------------
-- Conditions
-- env( <condition>, <args> )
-- *<args> are optional
------------------------
IsGeneralAnimEnd = 0
IsAttackAnimEnd = 1
AnimIDOffset = 9
AdditiveBlendAnim = 10
AdditiveBlendAnimOfSlot = 11

IsAtkRequest = 100 -- args: <attack request index>
IsAtkReleaseRequest = 101
IsChainAtkRequest = 102
GetAtkDuration = 103
GetWeaponSwitchRequest = 104
GetCommandIDFromEvent = 105
GetAIActionType = 106
GetAIChainActionType = 107
GetChainEvadeRequest = 108
GetWeaponChangeRequest = 109
GetAnimIDFromMoveParam = 110
IsThereAnyAtkRequest = 111
IsThereAnyChainAtkRequest = 112
IsItemUseMenuOpening = 113
IsMagicUseMenuOpening = 114
IsItemUseMenuOpened = 115
IsMagicUseMenuOpened = 116
GetBlendAnimIDFromMoveParam = 117
GetAIChainStepType = 118
GetTransitionToSpecialStayAnimID = 119
GetAIAtkCancelType = 120
GetWeaponCancelType = 121 -- args: <hand index>
IsWeaponCancelPossible = 122
GetAIDefenseCancelType = 123
GetAIVersusBackstabCancelType = 124

IsFalling = 200
IsLanding = 201
GetReceivedDamageType = 202
IsActiveActionValid = 203
GetActionEventNumber = 204
IsNormalDmgPassThroughDuringThrow = 205
IsThrowing = 206
GetWeaponSwitchState = 207
IsEquipmentSwitchPossible = 209
IsAnimCancelPossibleInAtkRelease = 210
IsEmergencyStopAnimPlaying = 211
GetLockRangeState = 212
GetLockAngleState = 213
IsAnimCancelPossibleInDamageHit = 214
IsChangeToScrapeAtk = 215
IsChangeToDeflectAtk = 216
IsChangeToAfterParrySuccess = 217
IsChangeFromNormalToBigAtk = 218
GetMovementType = 219
IsLargeAtkComboPossible = 220
IsMapActionPossible = 221
GetReceivedDamageDirection = 222
GetMapActionID = 223
GetFallHeight = 224
GetEquipWeaponCategory = 225 -- args: <hand index>
IsHoldingBow = 226
GetMagicAnimType = 227
WasNotLargeAtk = 228
IsBackAtkPossible = 229
IsAfterParryAtkPossible = 230
GetItemAnimType = 231
IsMagicUseable = 232 -- args: <hand index>, <unknown index>
IsItemUseable = 233
IsPrecisionShoot = 234
IsFireDamaged = 235
GetDamageLevel = 236
GetGuardLevelAction = 237
IsNewLeftHandAtkFromStay = 238
IsParryFromIdle = 239
IsGuardFromIdle = 240
IsNewLeftHandAtkFromAtkCancel = 241
IsParryFromAtkCancel = 242
IsGuardFromAtkCancel = 243
IsTiedUp = 244
IsOutOfAmmo = 245 -- args: <slot index> # 1 is left slot, 0 is right slot
IsUseCatLanding = 246
GetHoverMoveState = 247
IsTruelyLanding = 248
IsRightHandMagic = 249
IsChangeToSpecialStayAnim = 250
GetSpecialStayAnimID = 251
AcquireSpecialDamageAnimationID = 252
IsRunTurnAnimPlaying = 253
IsGenerateAction = 254
GetSpecialStayCancelAnimID = 255
HasReceivedAnyDamage = 256
GetMoveAnimParamID = 257
GetGuardLevel = 258
IsRequestTurnAnimStart = 259
IsTurningWithAnim = 260
IsFlying = 261
IsAbilityInsufficient = 262 -- args: <hand index>
GetEquipWeightRatioForFalling = 263
GetFlightMotionState = 264
GetIsWeakPoint = 265
GetMoveAnimBlendRatio = 266
GetLadderActionState = 267
IsInDisguise = 268
IsCoopWait = 269
IsCoop = 270
IsSpecialTransitionPossible = 271
GetLandingAnimBlendRatio = 272
GetThrowAnimID = 273
DidOpponentDieFromThrow = 274
HasThrowEnded = 275
IsThrowSelfDeath = 276
IsThrowSuccess = 277
GetGuardMotionCategory = 278 -- args: <hand index>
IsBeingThrown = 279
IsSelfThrow = 280
IsThrowDeathState = 281
GetNewLockState = 282
IsOnLadder = 283
GetPhysicalAttribute = 284
GetSpecialAttribute = 285
GetSpecialStayDeathAnimID = 286
HasReceivedAnyDamage_AnimEnd = 287
EggGrowth_IsHeadScratch = 288
EggGrowth_IsBecomeEggHead = 289
IsStop = 290
IsSomeoneOnLadder = 291 -- args: <check distance>, <unknown index>
IsSomeoneUnderLadder = 292 -- args: <check distance>, <unknown index>
GetLadderHandState = 293
DoesLadderHaveCharacters = 294 -- args: <check distance>, <unknown index>, <unknown index>
IsLadderRightHandStayState = 295
IsDescendingToFloor = 296
IsInputDirectionMatch = 297
IsSpecialTransition2Possible = 298
IsVersusDivineDamage = 299

IsGeneralAnimCancelPossible = 300
GetEventEzStateFlag = 301 -- args: <EzState command id>
IsLadderEventEnd = 302
IsReachBottomOfLadder = 303
IsReachTopOfLadder = 304
GetStateChangeType = 305 -- args: <state change id>
IsOnLastRungOfLadder = 306
GetWeaponDurability = 311
IsWeaponBroken = 312
IsAnimEndBySkillCancel = 313
EggGrowth_IsBecomeEgghead_SecondStage = 314
IsHamariFallDeath = 315 -- args: <unknown index>
IsClient = 316
IsSlope = 317
IsSwitchState = 318
IsPressUpKey = 319
IsSpecialTurning = 320
GetIntValueForTest = 321
IsObjActInterpolatedMotion = 322
GetObjActTargetDirection = 323
GetObjActRemainingInterpolateTime = 324
IsGap = 325
GetSwordArtID = 326 -- args: <hand index>
IsMovingLaterally = 327
IsNet = 328
HasBrokenSA = 329
IsEmergencyQuickTurnActivated = 330
IsDoubleChantPossible = 331
IsAnimOver = 332
ObtainedDT = 333
GetBehaviorID = 334 -- args: <hand index>
IsTwoHandPossible = 335 -- args: <hand index>
IsPartDamageAdditiveBlendInvalid = 336
IsThrowPosRealign = 337
GetBoltLoadingState = 338 -- args: <slot index>
IsAnimEnd = 339 -- args: <unknown index>
IsTwinSwords = 340 -- args: <hand index>
GetTurnAngleForDelayedTurn = 341
GetThrowDefenseCount = 342
IsEmergencyEvasionPossible = 343 -- args: <unknown index>
HasEnoughArtsPoints = 344 -- args: <button index>, <hand index>
GetEquipWeaponSpecialCategoryNumber = 345 -- args: <hand index>
CheckForEventAnimPlaybackRequest = 346
IsFemale = 347
GetDelayTurnAngleDifference = 348
IsDamageMotionOff = 349
HasReachedStatsNeededForWeapon = 350 -- args: <hand index>  -- Checks for the attainmentWepStatus fields in EquipParamWeapon
UpperArmControlOuterAngle = 351
UpperArmControlTopAndBottomAngle = 352
CompleteLadderSlideDown = 353
GetLadderRungCount = 354
GetNumberOfRungsBelowOnLadder = 355
GetBowAndArrowSlot = 356
GetWeaponStorageSpotType = 357 -- args: <hand index>
GetStayAnimCategory = 358
GetWeaponSwitchStatus = 359
IsEquipmentMenuOpen = 360
GetRemainingArrowCount = 361
GetSpEffectType = 362 -- args: <enum> SP_EFFECT_TYPE_
IsPlayerInRangeOfMount = 363
GetEventID = 364
IsMultiplayer = 365
IsAutomaticTesting = 368

GetHP = 1000
GetStamina = 1001
IsGhost = 1002
GetRandomInt = 1003
GetRandomFloat = 1004
IsUnableToDie = 1005
IsResurrectionPossible = 1006
IsCOMPlayer = 1007
GetAITargetAwareState = 1008
IsAIChangeToAwareState = 1009
GetAITargetAwareStatePreviousFrame = 1010

GetTestDamageAnimID = 1100
IsInvincibleDebugMode = 1101
WasGameLaunchedInPGTestMode = 1102
IsTiltingStick = 1103
GetGestureRequestNumber = 1104
IsStayState = 1105
ActionRequest = 1106 -- args: <action arm index>
ActionCancelRequest = 1107 -- args: <action arm index>
ActionDuration = 1108 -- args: <action arm index>
HasActionRequest = 1109
MovementRequest = 1110
MovementRequestDuration = 1111
HasThrowRequest = 1112
IsGuardCancelPossible = 1113
DoesAnimExist = 1114 -- args: <anim id>, *<anim id>
GetAIMovementType = 1115
GetSpEffectID = 1116
IsConversationEnd = 1117
IsLocked = 1118
GetAtkDirection = 1119
GetPartGroup = 1120
GetKnockbackDistance = 1121

IsMoveCancelPossible = 2000
GetSpecialMovementType = 2002
GetGeneralTAEFlag = 2003 -- args: <flag>
IsSwingHitTarget = 2004
GetCeremonyState = 2005
GetSuccessiveGuardCount = 2006
GetMinLuck = 2007
GetAccumulatedLuck = 2008
GetMaxLuck = 2009
GetMaxStamina = 2010
GetGeneralMSBParameter = 2011
IsHitWall = 2012
GetSafetyDirection = 2013
IsInCeremony = 2014
IsDoingCorpseCarryKeyframe = 2015
GetFP = 2016
IsCeremonyComplete = 2017
IsCeremonyInterrupt = 2018

IsSpeaking = 3000
GetTalkBehavior = 3001
GetTalkEzStateBehaviourID = 3002

Unknown9999 = 9999

------------------------
-- Commands
-- act( <command>, <args> )
-- *<args> are optional
------------------------
ChangeGeneralAnim = 0
ChangeUpperBodyAnim = 1
ChangeStayAnim = 2
ChangeGeneralAnimCategorized = 3 -- args: <anim category>, <anim id>, <layer index>, <blend>, <isLoop>
ChangeUpperBodyAnimCategorized = 4
ChangeGeneralAnimAdditiveCategorized = 5
ChangeUpperBodyAnimAdditiveCategorized = 6
ChangeGeneralAnimCategorizedMatchPlaybackTime = 7
ChangeUpperBodyAnimCategorizedMatchPlaybackTime = 8
SetAnimIDOffset = 9
SetAdditiveBlendAnimation = 10
SetAdditiveBlendAnimationSlotted = 11
ChangeBlendAnimationCategorized = 12
ChangeUpperAndLowerBodySyncedAnimCategorized = 13

SetActiveActionState = 100
SwitchMotion = 101 -- args: <bool>
SetAllowedThrowAttackType = 102 -- args: <index> # ENUM: THROW_STATE
SetAllowedThrowDefenseType = 103 -- args: <index> # ENUM: THROW_STATE
SwitchEquippedWeapon = 104
SetReadyForAtkFinish = 105
SetEquipmentChangeable = 106
SetUnableToFall = 107
SendMessageIDToEvents = 108 -- args: <event call>
SetAttackType = 109 -- args: <index> # -1
SetStaminaRecoveryDisabled = 110
SetAIBusyDoingAction = 111
BowTurn = 112
SetBowStance = 113
SetPreciseAimMode = 114
SetSpecialMovement = 115
SetIsWeaponChanging = 116
SetIsItemInUse = 117 -- args: <bool>
SetIsMagicInUse = 118 -- args: <bool>
SetHoverState = 119
RemoveBinoculars = 120
ChangeToSpecialStay = 121
SetIsHeadTurnPossible = 122
OpenMenuWhenUsingItem = 123
OpenMenuWhenUsingMagic = 124 -- args: <action arm index>
BlowDamageTurn = 125
SetDeathStay = 126 -- args: <bool> # TRUE, FALSE
CloseMenuWhenUsingItem = 127
CloseMenuWhenUsingMagic = 128
DisallowAdditiveTurning = 129 -- args: <bool>
ChangeFlightStatus = 130
ShowFixedYAxisDirectionDisplay = 131
WhiffPossibility = 132
SetLadderActionState = 133 -- args: <index>
SetInsufficientStrengthAnimID = 134
ForceCancelThrowAnim = 135
SetThrowState = 136 -- args: <index> # ENUM: THROW_TYPE
StartSlidingDownLadder = 137
SetIsEventActionPossible = 138 -- args: <bool>
RequestThrowAnimInterrupt = 139
SetHandStateOfLadder = 140
SetDamageAnimType = 141 -- args: <index> # ENUM: DAMAGE_FLAG
DownwardSlideTurn = 142 -- args: <index>
InterruptAttack = 143
SkyDeathWarp = 144
ClearSlopeInfo = 145
ReceiveStateInput = 146
SetCanChangeEquipmentOn = 147
SetHavokVariable = 148 -- args: <string>, <value>
AimAtSelfPosition = 149
SetIsItemAnimationPlaying = 150
DoAIReplanningAtCancelTiming = 151
DenyEventAnimPlaybackRequest = 152
InvokeBackstab = 153
WeaponParameterReference = 154 -- args: <hand index>
AINotifyAttackType = 155 -- args: <index>
SetAutoCaptureTarget = 156
ClearAutoCaptureTarget = 157
RequestAIReplanning = 158
TurnTowardAttacker = 159
SetThrowPossibilityState_Attacker = 160 -- args: <index>
SetThrowPossibilityState_Defender = 161 -- args: <index>
NotifyAIMagicCast = 162
SetCanChangeEquipmentOff = 163

StateIdentifier = 200

ChangeHP = 1000 -- args: <value>
ChangeStamina = 1001 -- args: <value> # ENUM: STAMINA_REDUCE

SyncAtInit_Active = 1100
SyncAtInit_Passive = 1101

SetMovementScaleMult = 2001 -- args: <value>
AddSpEffect = 2002 -- args: <id>
SetFastStealthThrowEnabled = 2003
SetTurnSpeed = 2004 -- args: <degrees>
SetCeremonyState = 2005
SetDamageMotionBlendRatio = 2006 -- args: <value>
SetForceTurnTarget = 2007
ForceTurn = 2008
SpecialTurn = 2009
SetInSpecialGuard = 2010
SetWeaponCancelType = 2011 -- args: <index>
SetIsPreciseShootingPossible = 2012
ChooseBowAndArrowSlot = 2013 -- args: <slot index> # 0, 1
Set4DirectionMovementThreshold = 2014 -- args: <front right angle>, <front left angle>, <back left angle>, <back right angle> #
LockonSystemUnableToTurnAngle = 2015 -- args: <angle>, <angle>
ReserveArtsPointsUse = 2016 -- args: <button index>, <hand index>
SetArtsPointFEDisplayState = 2017 -- args: <value> # 0, 1
LockonFixedAngleCancel = 2018
TurnToLockonTargetImmediately = 2019 -- args: *<value>
SetSpecialInterpolation = 2020 -- args: <value>, <bool>
LadderSlideDownCancel = 2021
DisableMagicIDSwitching = 2022
DisableToolIDSwitching = 2023
UseItemDecision = 2024
SetNpcAIAttackRequestIDAfterBlend = 2025 -- args: <value>
DecideMagicUse = 2026
FallPreventionAssist = 2027
FaceDirection = 2029 -- args: <degrees>
PlayEventSync = 2031

DebugLogOutput = 9000
ClearSpEffect = 9001 -- args: <id>
Test_SpEffectTypeSpecifyDelete = 9002 
MarkerStart = 9003
MarkerEnd = 9004

Wait = 9100
ResetInputQueue = 9101
SetIsEventAnim = 9102
SetAIAttackState = 9103 -- args: <index>
SetIsTurnAnimInProgress = 9104
SetTurnAnimCorrectionRate = 9105 -- args: <degrees>

ReplanningRequestToAI = 9999 -- args: <value> # 1, 2, 3

------------------------------------------
-- Must be last for the global variables to be read
------------------------------------------
global = {}

function dummy()
end

global.__index = function (table, element)
    return dummy
end

setmetatable(_G, global)
